#+TITLE: Linux Internals

* Unix Processes

- In Unix, *_everything is a file_*.

- Anytime open a resource in running process it is assigned a file descriptor
  number. File descriptors are *NOT* shared between unrelated processes, they
  live and die with the process they are bound to.

- Any resource that your process opens gets a unique number identifying it:
  - File Descriptor numbers are assigned the lowest unused value;
  - Once a resource is closed its file descriptor number becomes available again
  - Closed resources are not given a file descriptor number.

- STDIN, STDOUT, and STDERR has file descriptor 0, 1, and 2. So the lowest
  number for any new opened resource will start with 3.

- There are some resource limits imposed on a process by the kernel:
  - Soft limits: if you exceed the soft limit, an exception will be raised, but
    any process can always change that limit.
  - Hard limits: only superuser can set this limit.

- ~fork~ /system call/ allows a running process to */create new process/*, and the
  new process is an exact copy of the original
  - Child process *inherits any open file descriptors from the parent*. In this
    way, the two processes can share open files, sockets,
  - Child process inherits a copy of everything that the parent process has in
    main memory. and because fork is fast, it is faster than loading the app x
    times in separate instances.

- The OS doesn't treat child processes any differently than any other processes.
  so */when the parent process dies, the child process continues on/*.

  although fork create a new child process that is an exact copy of the parent
  process, modern unix system something called *copy-on-write (CoW) /semantics/* to
  avoid copy all data all at once. Both parent and child will actually share the
  same physical data in memory until one of them needs to modify it.
