<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Warren Liu (Posts about java)</title><link>https://example.com/</link><description></description><atom:link href="https://example.com/categories/java.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2017 &lt;a href="mailto:n.tesla@example.com"&gt;Warren Liu&lt;/a&gt; </copyright><lastBuildDate>Fri, 14 Jul 2017 20:53:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Java 8 Topics</title><link>https://example.com/posts/java-8-topics/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;NIO File API&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;java.nio.file.Path&lt;/code&gt; is part of the more modern &lt;code&gt;java.nio.file&lt;/code&gt; lib
and does everything &lt;code&gt;java.io.File&lt;/code&gt; can, but generally in a better way.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.toFile()&lt;/code&gt; to convert to &lt;code&gt;File&lt;/code&gt; for legacy.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file.ToPath()&lt;/code&gt; to convert to &lt;code&gt;Path&lt;/code&gt; instance.
&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;Files&lt;/code&gt; utility class, which deals with &lt;code&gt;Path&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toPath&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Problems with &lt;code&gt;java.io.File&lt;/code&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Many methods didn't throw exceptions when they failed, so it was
impossible to obtain a useful error message.
&lt;/li&gt;
&lt;li&gt;No real support for symbolic links.
&lt;/li&gt;
&lt;li&gt;More support for metadata was desired.
&lt;/li&gt;
&lt;li&gt;Many of the &lt;code&gt;File&lt;/code&gt; method didn't scale. Requesting a large
directory listing over a server would result in a hang.
&lt;/li&gt;
&lt;li&gt;No possible to write reliable code that could recursively walk a
file tree when there were circular symbolic link.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating a Path
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Paths.get(String... filePath)&lt;/code&gt;, which is a shorthand for:
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileSystems.getDefault().getPath(String filePath)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user.home"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"logs"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"foo.log"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Files&lt;/code&gt; consists exclusively of static methods that operate on
files, directories or other types of files. In most cases, these
methods will delegate to the associated &lt;code&gt;file system provider&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;copy:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;copy(InputStream in, Path target, CopyOption...options)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy(Path source, OutputStream out)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy(Path source, Path target target, CopyOption... options)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;create:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;createDirectoreis(Path dir, FileAttribute... attrs)&lt;/code&gt; : will
create nonexistent parent directories first.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createDirectory(Path dir, FileAttribute... attrs)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createFile(Path path)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-0-1" class="outline-4"&gt;
&lt;h4 id="sec-1-0-1"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; more on the File API.&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Using Method References&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Java compiler will take either a lambda expression, or a reference
to a method, where an implementation of a &lt;b&gt;function interface&lt;/b&gt; is
expected.
&lt;/li&gt;
&lt;li&gt;Method reference is used to &lt;b&gt;replace a single-method lambda
expression&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;Method reference for static methods and methods take parameters:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;staticMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;staticMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//equals to&lt;/span&gt;
&lt;span class="nl"&gt;Class:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;staticMethod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Any arguments, if any, taken by the method are passed automatically.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Numbers&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isMoreThanFifty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
	   &lt;span class="n"&gt;BiPredicate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Using a lambda expression&lt;/span&gt;
&lt;span class="n"&gt;findNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isMoreThanFifty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Using a method reference&lt;/span&gt;
&lt;span class="n"&gt;findNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Numbers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;isMoreThanFifty&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance method reference of an object of a particular type
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instanceMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//equals to&lt;/span&gt;
&lt;span class="nl"&gt;ObjectType:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;instanceMethod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;For example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;TriFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;doSum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//using lambda&lt;/span&gt;
&lt;span class="n"&gt;TriFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doSum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Using method reference&lt;/span&gt;
&lt;span class="n"&gt;TriFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;doSum&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance method reference of an existing object.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instanceMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//equals to&lt;/span&gt;
&lt;span class="nl"&gt;obj:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;instanceMethod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Constructor method reference
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ClassName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//equals to&lt;/span&gt;
&lt;span class="nl"&gt;ClassName:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Collection and Stream&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;With &lt;code&gt;forEach&lt;/code&gt;, once the method starts, we can't break out of the
iteration.
&lt;/li&gt;
&lt;li&gt;Pick one element with &lt;code&gt;findFirst/findAny&lt;/code&gt; which return an &lt;code&gt;Optional&lt;/code&gt;.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Optinal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foundName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findFirst&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;foundName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ifPresnet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h3 id="sec-3-1"&gt;Some of the JDK libraries that return a Stream&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Stream.concat()&lt;/code&gt; lazily concatenated streams
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream.generate(Supplier&amp;lt;T&amp;gt; s)&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Get a &lt;code&gt;Stream&lt;/code&gt; from &lt;code&gt;Iterator&lt;/code&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;iteratorToStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream.iterate(T seed, UnaryOperator&amp;lt;T&amp;gt; f)&lt;/code&gt;: return a Stream
consisting of &lt;code&gt;seed&lt;/code&gt;, &lt;code&gt;f(seed)&lt;/code&gt;, &lt;code&gt;f(f(seed))&lt;/code&gt;, etc.
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;chars()&lt;/code&gt; method from the &lt;code&gt;CharSequence&lt;/code&gt; interface, returns a
Stream&amp;lt;Int&amp;gt; over which we can iterate.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;chars&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream&amp;lt;Path&amp;gt; Files.list(Path path)&lt;/code&gt; method list all filenames in a
directory, or &lt;code&gt;listFiles()&lt;/code&gt; to get all the files instead of just
their names.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
     &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;isDirectory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream&amp;lt;String&amp;gt; Files.lines(Path path)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream&amp;lt;Path&amp;gt; Files.find(Path start, int maxDepth, BiPredicate&amp;lt;Path,
  BasicFileAttributes&amp;gt; matchers, FileVisitOption... options)&lt;/code&gt; :
Returns a Stream that is lazily populated with Path by searching for
files in a file tree rooted at a given starting file.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h3 id="sec-3-2"&gt;Reducing a Collection to a single value.&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Similar method on &lt;code&gt;Stream&lt;/code&gt; are : &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;,  &lt;code&gt;average&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;mapToInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optional&amp;lt;T&amp;gt; reduce(BinaryOperator&amp;lt;T&amp;gt; accumulator)&lt;/code&gt; : reduction
using an associated accumulation function. This is equivalent to:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;foundAny&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;foundAny&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="n"&gt;foundAny&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foundAny&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;emtpy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;But it is &lt;i&gt;&lt;b&gt;not&lt;/b&gt; constrained to execute sequentially&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;empty stream results in Optional.empty()
&lt;/li&gt;
&lt;li&gt;Single element stream result in the element returned, without
apply the accumulator.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T reduce(T identity, BinaryOperator&amp;lt;T&amp;gt; accumulator)&lt;/code&gt; : is
equivalent to:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator
function, this means that for all &lt;code&gt;t&lt;/code&gt;,
&lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; is equal to &lt;code&gt;t&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;accumulator&lt;/code&gt; function must be an associative function:
&lt;ul class="org-ul"&gt;
&lt;li&gt;which means:
&lt;p class="verse"&gt;
(a op b) op c == a op (b op c)&lt;br&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Associative function is important for parallel evaluation:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U reduce(U identity, BiFunction&amp;lt;U, T, U&amp;gt; accumulator,
  BinaryOperator&amp;lt;U&amp;gt; combiner)&lt;/code&gt;: The most general form of reduce.
&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;StringJoiner&lt;/code&gt; class or the convenience method
&lt;code&gt;String.join()&lt;/code&gt; to join collection into a string.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collect()&lt;/code&gt; method does the reduction but delegate the actual
implementation or target to collector.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;joining&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3" class="outline-3"&gt;
&lt;h3 id="sec-3-3"&gt;Collectors&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Stream.collect()&lt;/code&gt; method takes a &lt;code&gt;Collector&lt;/code&gt;, or three functions
with a signature like:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;collect(Supplier&amp;lt;R&amp;gt; supllier, BiConsumer&amp;lt;R,T&amp;gt; accumulator,
    BiConsumer&amp;lt;R, R&amp;gt; combiner)&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;make the result container,
&lt;/li&gt;
&lt;li&gt;add a single elements to a result container,
&lt;/li&gt;
&lt;li&gt;merge one result container into another.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;olderThan20&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;addAll&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Collector&amp;lt;T, A, R&amp;gt;&lt;/code&gt; interface wraps the three parameters list above,
with an optional additional finisher for final transform on the
container.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; The type of stream elements.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; The mutable accumulation type of the reduction operation.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; The result type of the reduction operation.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Collector&lt;/code&gt; could have a list of &lt;code&gt;Characteristics&lt;/code&gt; for inspect:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;CONCURRENt&lt;/code&gt; : indicate the result container can support the
accumulator function being called concurrently with same result container.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IDENTITY_FINISH&lt;/code&gt; : finisher function is the &lt;i&gt;identity function&lt;/i&gt;
    and can be ignored.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNORDERED&lt;/code&gt; : the collection operation doesn't commit to
preserving the encounter order of input elements.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Collectors&lt;/code&gt; provides many useful &lt;code&gt;Collector&lt;/code&gt; for reduction
operations.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarizingDouble(ToDoubleFunction mapper)&lt;/code&gt; : Return summary
statistics for the resulting double values from the mapper.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DoubleSummaryStatistics&lt;/code&gt; have method to get &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;,
&lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt; for the collection.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;averagingDouble(ToDobuleFunction mapper)&lt;/code&gt; : produce the arithmetic
mean of a double-valued function applied to the input elements.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;averagingInt&lt;/code&gt;, &lt;code&gt;averagingLong&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counting()&lt;/code&gt; : counts the number of input elements.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;groupingBy(Function&amp;lt;T, K&amp;gt; classifier)&lt;/code&gt;: grouping elements according
to a classification function. and return a Map.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;groupingByConcurrent()&lt;/code&gt; returns a concurrent Collector.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapping(Function&amp;lt;T, U&amp;gt; mapper, Collector downstream)&lt;/code&gt; : applying
the mapping to each input element before accumulation. It adapts a
Collector accepting elements of type &lt;code&gt;U&lt;/code&gt; to one accepting &lt;code&gt;T&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;partioningBy(Predicate&amp;lt;T&amp;gt; predicate)&lt;/code&gt; : collector that return a
&lt;code&gt;Map&amp;lt;Boolean, List&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reducing(BinaryOperator&amp;lt;T&amp;gt; op)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toMap&lt;/code&gt;, &lt;code&gt;toConcurrentMap(Function&amp;lt;&amp;gt; keyMapper, Function&amp;lt;&amp;gt;
  valueMapper)&lt;/code&gt; : return a &lt;code&gt;ConcurrentMap&lt;/code&gt;, whose keys and values are
mapped from each elements.
&lt;/li&gt;
&lt;li&gt;If the mapped keys contains duplicates, &lt;code&gt;IllegalStateException&lt;/code&gt;
  is thrown.
&lt;ul class="org-ul"&gt;
&lt;li&gt;It is common for either the key or the value to be the input
elements. In this case, the utility method &lt;code&gt;Function.identity()&lt;/code&gt;
may be helpful:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;studentToGPA&lt;/span&gt;
&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Functions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
			       &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;computeGPA&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toMap(Function keyMapper, Function valueMapper, BinaryOperator
  mergeFunction)&lt;/code&gt;: takes an additional merge function, when the maps
key contains duplicates, the corresponding values is merged by it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Multiple and Fluent Comparisons&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;List.sort()&lt;/code&gt; mutate the list, to preserve the original list using
the Stream's &lt;code&gt;sorted()&lt;/code&gt; method:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ascendingAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ageDifference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// or we could do with method references.&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ageDifference&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;If all we want is a reverse of the comparison, the &lt;code&gt;Comparator&lt;/code&gt;
  method has a &lt;code&gt;reversed()&lt;/code&gt; default method:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compareAscending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ageDifference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compareDescending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compareAscending&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reversed&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min/max&lt;/code&gt; method could also take a comparator:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ageDifference&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;ifPresent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;youngest&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Youngest: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;youngest&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static Comparator&amp;lt;T&amp;gt; comparing(Function&amp;lt;T, U&amp;gt; keyExtractor&amp;gt;)&lt;/code&gt;:
allowing comparing by some key:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;byName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;With multiple comparators,  using &lt;code&gt;thenComparing()&lt;/code&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;byAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;byName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;comparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byAge&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;thenComparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byName&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4-1" class="outline-3"&gt;
&lt;h3 id="sec-4-1"&gt;Decorator pattern with Lambda&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Using the &lt;code&gt;Function.andThen()&lt;/code&gt; to combine or chain two &lt;code&gt;Function&lt;/code&gt;
  together.
&lt;/li&gt;
&lt;li&gt;Once we compose them, a call to &lt;code&gt;apply()&lt;/code&gt; will hop through the
chained ~Function~s:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;andThen&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//same as&lt;/span&gt;
&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;An example for decorator pattern:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setFilters&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;...&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
	&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compose&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
	&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Automatic Resource Management (ARM)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Rather than using both the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; blocks, a special
form of the &lt;code&gt;try&lt;/code&gt; block with a resource attached to it.
&lt;/li&gt;
&lt;li&gt;The java compiler will automatically inserting the finally block and
then call the &lt;code&gt;close()&lt;/code&gt; method:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FilrWriterARM&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;AutoCloseable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"close called automatically..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;FileWriterARM&lt;/span&gt; &lt;span class="n"&gt;writerARM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileWriterARM&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"somefile"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;}{&lt;/span&gt;
    &lt;span class="n"&gt;writerARM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"somsthing"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Done with the resources..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;We can see the &lt;code&gt;close()&lt;/code&gt; method was called as soon as we left the try
block.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Could also use lambda expressions and the &lt;b&gt;execute around method&lt;/b&gt;
  pattern to manage resources:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;use&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
		       &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;UseInstance&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FileWriterARM&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;FileWriterARM&lt;/span&gt; &lt;span class="n"&gt;writerARM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileWriterARM&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writerARM&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;writerARM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;Dealing with Exceptions in Lambda&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The &lt;code&gt;apply()&lt;/code&gt; method of the &lt;code&gt;Function&lt;/code&gt; interface does not specify
any checked exceptions.
&lt;/li&gt;
&lt;li&gt;So the lambda expression is not permitted to throw any checked exceptions.
&lt;/li&gt;
&lt;li&gt;Two options:
&lt;ul class="org-ul"&gt;
&lt;li&gt;handle the exception within the lambda expression, or
&lt;/li&gt;
&lt;li&gt;catch and rethrow it as an unchecked exception.
&lt;ul class="org-ul"&gt;
&lt;li&gt;In a concurrent execution, an exception raised within the lambda
expression will be propagated automatically to the calling
primary thread.
&lt;/li&gt;
&lt;li&gt;This will not terminate or obstruct the execution of other
lambda expressions running concurrently.
&lt;/li&gt;
&lt;li&gt;If exceptions are thrown from multiple concurrent executions,
only &lt;i&gt;one of them will be reported in the catch block&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the details of all exceptions are important, it is better to
capture those within the lambda expressions and pass them back to
the main thread as part of the result.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When we design our own higher-order functions based on our specific
need, we can more flexibly design the companion functional
interfaces to go with it.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;UseInstance&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;Lambda with Laziness&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-7-1" class="outline-3"&gt;
&lt;h3 id="sec-7-1"&gt;Delayed Initialization&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-7-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Holder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Heavy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heavy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;createAndCacheHeavy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Holder&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
	&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;outpr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Heavy Holder is created"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Heavy&lt;/span&gt; &lt;span class="nf"&gt;getHeavy&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
	&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;heavy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="nf"&gt;createAndCacheHeavy&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
	&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeavyFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Heavy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Heavy&lt;/span&gt; &lt;span class="n"&gt;heavyInstance&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Heavy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Heavy&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;heavyInstance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	    &lt;span class="o"&gt;}&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;

	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;HeavyFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heavy&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;heavy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HeavyFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;

	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;heavy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The above use an indirect &lt;code&gt;Supplier&lt;/code&gt; to avoid synchronization on all
the &lt;code&gt;get()&lt;/code&gt; which normally required when using a plain &lt;code&gt;null&lt;/code&gt; check
and lazy initialization pattern.
&lt;/li&gt;
&lt;li&gt;Only the first call to &lt;code&gt;heavy.get()&lt;/code&gt; is synchronized, the later ones
are not because the &lt;code&gt;heavy&lt;/code&gt; instance has been changed by the first
call.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-7-2" class="outline-3"&gt;
&lt;h3 id="sec-7-2"&gt;Creating Infinite, Lazy Collections&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-7-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Using Stream's &lt;code&gt;static iterate(seed, UnaryOperator)&lt;/code&gt; method.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;Default methods&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
&lt;i&gt;- https://blog.codefx.org/java/everything-about-default-methods/&lt;/i&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Syntax: just like a regular method but modified with &lt;code&gt;default&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;thenComparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Explicit call to Default Methods:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringComparator&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;thenComparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"call to super"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thenComparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The interface name is used to specify the following &lt;code&gt;super&lt;/code&gt; which
would otherwise refer to the superclass (in this case Object).
&lt;/li&gt;
&lt;li&gt;It is not possbile to call a method from an interface that is not
mentioned in the &lt;code&gt;implements&lt;/code&gt; clause.
&lt;/li&gt;
&lt;li&gt;When implementing two interfaces where &lt;i&gt;one extends the other&lt;/i&gt;
    &lt;b&gt;Comparator.super&lt;/b&gt; causes a different compile error.
&lt;/li&gt;
&lt;li&gt;Together this means that it is &lt;i&gt;not possible to explicitly call
&lt;b&gt;overridden&lt;/b&gt; or &lt;b&gt;reabstracted&lt;/b&gt; default methods&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resolution Strategy:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Classes win over interfaces.
&lt;/li&gt;
&lt;li&gt;More specific interfaces win over less specific ones. A default
from &lt;code&gt;List&lt;/code&gt; wins over a default from &lt;code&gt;Collection&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;If there is not a unique winner according to the above rules,
concrete classes must disambiguate manually.
&lt;/li&gt;
&lt;li&gt;Re-Abstracing methods:
&lt;ul class="org-ul"&gt;
&lt;li&gt;If an abstract class or interface declares a method as
&lt;i&gt;abstract&lt;/i&gt; for which a &lt;i&gt;default implementation exists&lt;/i&gt; in some
superinterface, the default implementation of is overridden.
&lt;/li&gt;
&lt;li&gt;Hence all concrete classes which subtype it must implement the
method.
&lt;/li&gt;
&lt;li&gt;This technique is used throughout the JDK, e.g. on ConcurrentMap
(link) which re-abstracts a number of methods for which Map
(link) provides default implementations because these are not
thread-safe.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It is not possible for an interface to provide default
implementations for the methods in Object.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Default methods can only be &lt;code&gt;public&lt;/code&gt;, and cannot be &lt;code&gt;final&lt;/code&gt; or
&lt;code&gt;synchronized&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-8-1" class="outline-3"&gt;
&lt;h3 id="sec-8-1"&gt;Interface Evolution&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-8-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The purpose of default method is to enable interfaces to be evolved
in a compatible manner after their initial publication.
&lt;ul class="org-ul"&gt;
&lt;li&gt;It was impossible to add methods to interfaces without breaking
all implementations before default method.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ousting Utility classes. All those static methods which take an
instance of the interfaces as an argument can now be transformed
into a default method on the interface.
&lt;ul class="org-ul"&gt;
&lt;li&gt;While removing all interface-related utility classes in a code
base is possible,
&lt;/li&gt;
&lt;li&gt;It &lt;b&gt;might not be advisable&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;The usability and cohesiveness of the interface should remain the
main priority.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-8-2" class="outline-3"&gt;
&lt;h3 id="sec-8-2"&gt;Inheritance and Class-Building&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-8-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;With inheritance a type can assume three types of characteristics of
another type:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Type
&lt;/li&gt;
&lt;li&gt;Behaviour
&lt;/li&gt;
&lt;li&gt;State
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Class subtyping inherit all three of those characteristics.
&lt;/li&gt;
&lt;li&gt;Interface with default methods subtyping inherit only Type and
Behaviour.
&lt;/li&gt;
&lt;li&gt;Default method vs Mixin and Traits
&lt;ul class="org-ul"&gt;
&lt;li&gt;Mixin allow to inherit their type, behaviour &lt;b&gt;and state&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;As interfaces with defaults allow no inheritance of state, they
are clearly not mixins.
&lt;/li&gt;
&lt;li&gt;Traits do not define their own state, very similar to interfaces
with default methods
&lt;/li&gt;
&lt;li&gt;But the concepts are still different, and those differences are
not entirely trivial.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Default methods vs Abstract classes
&lt;ul class="org-ul"&gt;
&lt;li&gt;Language Differences
&lt;ul class="org-ul"&gt;
&lt;li&gt;Interfaces allow multiple inheritance
&lt;/li&gt;
&lt;li&gt;Default methos are never final, cannot be synchronized and
cannot override &lt;code&gt;Object&lt;/code&gt;'s method and always public.
&lt;/li&gt;
&lt;li&gt;Cannot define fields, so every state change has to be done via
the public API.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conceptual Differences
&lt;ul class="org-ul"&gt;
&lt;li&gt;Classes define &lt;i&gt;what something is&lt;/i&gt;, while interfaces usually
define &lt;i&gt;what something can do&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;Abstract classes are valid for skeletal (i.e. partial)
implementations of interfaces but &lt;i&gt;should not exist without a
matching interface&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>java</category><guid>https://example.com/posts/java-8-topics/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item><item><title>Java Interview Questions</title><link>https://example.com/posts/java-interview-questions/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Java Programming Interview Exposed&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Writing core algorithm&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;How would you implement a bubble sort algorithm?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
The &lt;b&gt;bubble sort&lt;/b&gt; is extremely simple to describe and implements.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bubblesort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;numbersSwitched&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;numbersSwitched&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]){&lt;/span&gt;
		&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
		&lt;span class="n"&gt;numbersSwitched&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	    &lt;span class="o"&gt;}&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbersSwitched&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;
The worse case, when you want to sort a list that is already sorted in
reverse order, the performance is of \(O(n^2)\): &lt;i&gt;for each iteration, you
are only switching one elements&lt;/i&gt;. The best case is when a list is
already sorted, which has performance of \(O(n)\).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;How would you implement a insert sort algorithm?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
The &lt;b&gt;insert sort&lt;/b&gt; is another simple algorithm to describe:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;insertSort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sortedList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinkedList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

&lt;span class="nl"&gt;    originalList:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sortedList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sortedList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;
		&lt;span class="n"&gt;sortedList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
		&lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="n"&gt;originalList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	    &lt;span class="o"&gt;}&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
	&lt;span class="n"&gt;sortedList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortedList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The worst-case performance is still \(O(n^2)\).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;How would you implement the quicksort algorithm?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
The performance is much more efficient than the bubble sort and insert
sort with an average performance of \(O(n\log(n))\). The worst case is
still \(O(n^2)\). The choice of pivot can make a difference.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;quicksort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;higher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;higher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quicksort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quicksort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;higher&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sroted&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It is worth noting that each division of the list and the subsequent
recursive call is &lt;b&gt;independent&lt;/b&gt; of any other sorting necessary, and
could be performed &lt;b&gt;in parallel&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-5" class="outline-3"&gt;
&lt;h3 id="sec-1-5"&gt;How would you implement the merge sort algorithm?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-5"&gt;
&lt;p&gt;
This is another divide-and-conquer algorithm: split the list into two,
sort each sublist, and then merge the two list together.
&lt;/p&gt;

&lt;p&gt;
The main code is &lt;b&gt;merging the two lists efficiently&lt;/b&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
				  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
    &lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;leftPtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rightPtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;merged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()+&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftPtr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rightPtr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()){&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftPtr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightPtr&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;
	    &lt;span class="n"&gt;merged&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftPtr&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
	    &lt;span class="n"&gt;leftPtr&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;merged&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightPtr&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
	    &lt;span class="n"&gt;rightPtr&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftPtr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="n"&gt;merged&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftPtr&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
	&lt;span class="n"&gt;leftPtr&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightPtr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="n"&gt;merged&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightPtr&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
	&lt;span class="n"&gt;rightPtr&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;mergesort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;leftHalf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;leftHalf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mergesort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftHalf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mergesort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightHalf&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Again, merge sort has a performance of \(O(n\log(n)\). Each merge
operation is \(O(n)\), and each recursive call works on only half of the
given list.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6" class="outline-3"&gt;
&lt;h3 id="sec-1-6"&gt;Data Structure&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-6"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-6-1" class="outline-4"&gt;
&lt;h4 id="sec-1-6-1"&gt;Some notable &lt;b&gt;Collections&lt;/b&gt; methods&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-6-1"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt; &lt;code&gt;sort, binarySearch&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;with &lt;b&gt;Comparable&lt;/b&gt; and &lt;b&gt;Comparator&lt;/b&gt;
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;max, min&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;with &lt;b&gt;Comparable&lt;/b&gt; and &lt;b&gt;Comparator&lt;/b&gt;
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;void rotate(List list, int distance)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;Rotates the elements in the
sepcified list by the specified distance. After calling this
method, the element at inde \(i\) will be the element previously at
index \((i - distance) mod list.size()\)
&lt;ul class="org-ul"&gt;
&lt;li&gt;Can be usefully be applied to a sublist: &lt;br&gt;
    &lt;code&gt;Collections.rotate(list.subList(j, k+1), -1);&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;void shuffle(List list, Random rnd)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;randomly permute the
specified list.
&lt;/dd&gt;
&lt;dt&gt; (no term) &lt;/dt&gt;&lt;dd&gt;&lt;code&gt;void reverse(List&amp;lt;?&amp;gt; list)&lt;/code&gt;
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;&amp;lt;T&amp;gt; Comparator&amp;lt;T&amp;gt; reverseOrder(Comparator&amp;lt;T&amp;gt; cmp)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;returns a
comparator that imposes the reverse ordering of the specified
comparator.
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;int frequency(Collection c, Object o)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;return the number of
elements in the specified collection equal to the specified
object.
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;boolean disjoint(Collection c1, Collection c2)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;return true if
two specified collections have no elements in common.
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;List&amp;lt;T&amp;gt; nCopies(int n, T o)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;returns an &lt;b&gt;immutable&lt;/b&gt; list
consisting of \(n\) copies of the specified object.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The newly allocated data object is tiny, containing a single
reference to the data object.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;singleton(T o)&lt;/code&gt;  &lt;/dt&gt;&lt;dd&gt;return an &lt;b&gt;immutable&lt;/b&gt; set containing only the
specified object.
&lt;dl class="org-dl"&gt;
&lt;dt&gt; &lt;code&gt;singletonList(T o)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;an immutable list.
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;singletonMap&amp;lt;K key, V value&amp;gt;&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;returns an &lt;b&gt;immutable&lt;/b&gt; map that
only maps the specified key to the specified value.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;dt&gt; (no term) &lt;/dt&gt;&lt;dd&gt;Wrapper implementations
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;unmodifiableXXX&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;synchronizedXXX&lt;/code&gt;
&lt;/li&gt;
&lt;li id="&amp;lt;code&amp;gt;checkedXXX(Collection&amp;lt;T&amp;gt; c, Class&amp;lt;T&amp;gt; type)&amp;lt;/code&amp;gt;"&gt;returns
a dynamically typesafe view of the specified collection. Any
attemp to insert an element of the wrong type will result in an
immediate ClassCastException.
&lt;ul class="org-ul"&gt;
&lt;li&gt;This can prevent unchecked cast.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkedList&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkedSet&lt;/code&gt;, &lt;code&gt;checkedSortedSet&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkedMap&lt;/code&gt;, &lt;code&gt;checkedSortedMap&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6-2" class="outline-4"&gt;
&lt;h4 id="sec-1-6-2"&gt;Arrays&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-6-2"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt; &lt;code&gt;deepEquals(Object[] a1, Object[] a2), deepHashCode(), deepToString()&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;supporting
nested sub-arrays.
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;fill&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;assigns the value to the specified range of the specified array.
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;parallelPrefix(double[] array, DoubleBinaryOperator op)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;Cumulates,
in parallel, each element of the given array in place, using the
supplied function.
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;sort(T[] array, int fromIndex, int toIndex)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;support sosring in a range.
&lt;/dd&gt;
&lt;dt&gt; &lt;code&gt;stream(T[] array, int startInclusive, int endExclusive)&lt;/code&gt; &lt;/dt&gt;&lt;dd&gt;convert
a stream with the array as its source, also support range.
&lt;/dd&gt;
&lt;dt&gt; (no term) &lt;/dt&gt;&lt;dd&gt;&lt;b&gt;ArrayList&lt;/b&gt;, or &lt;b&gt;ArrayDeque&lt;/b&gt; should be preferable to &lt;b&gt;LinkedList&lt;/b&gt; for
queues/dequeus due to a limited amount of garbage it generates.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6-3" class="outline-4"&gt;
&lt;h4 id="sec-1-6-3"&gt;List&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-6-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The usage of &lt;code&gt;subList&lt;/code&gt; on the &lt;code&gt;List&lt;/code&gt; interface:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The &lt;b&gt;List&lt;/b&gt; interface now have a &lt;b&gt;subList(int fromIndex, int
toIndex)&lt;/b&gt; function, to return a view of the portion of the list,
inclusive &lt;code&gt;fromIndex&lt;/code&gt;, and exclusive &lt;code&gt;toIndex&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;The returned list is backed by this list, so non-structural
changes in the returned list are reflected in this list, and
vice-versa.
&lt;/li&gt;
&lt;li&gt;The method eliminates the need for explicit range operations. Any
operation that expects a list can be used as a range operation by
passing a subList view. For example, the following idiom removes a
range of element from a list:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Some list implementations have restrictions on the elements that
they may contain. For example, some implementations prohibit
&lt;code&gt;null&lt;/code&gt; elements, and some have restrictions on the types of their
elements. Attempting to add an ineligible element throws an
unchecked exception, typically &lt;b&gt;NullPointerException&lt;/b&gt; or
&lt;b&gt;ClassCastException&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;toArray()&lt;/b&gt; will return a new array.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;toArray(T[] a)&lt;/b&gt; will also return a &lt;b&gt;new array&lt;/b&gt;, &lt;i&gt;not the one
specified&lt;/i&gt;, if the size of &lt;code&gt;a&lt;/code&gt; is smaller than the List; it
otherwise return &lt;code&gt;a&lt;/code&gt;, with the remaining of &lt;code&gt;a&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt;
contains more elements thant the List.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;retainAll(Collection&amp;lt;?&amp;gt; c)&lt;/b&gt; will retains only the elements in
this list that care contained in the specified collection.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ArrayList
&lt;ul class="org-ul"&gt;
&lt;li&gt;ArrayList allows &lt;code&gt;null&lt;/code&gt; elements.
&lt;/li&gt;
&lt;li&gt;Be aware that the array size reallocation in ArrayList is
&lt;b&gt;one-way&lt;/b&gt;; it doesn't shrink if elements are removed from it. If
you have a list that oscillates between many and a few elements,
&lt;b&gt;ArrayList&lt;/b&gt; might not be the best implementation for it.
&lt;/li&gt;
&lt;li&gt;Increase the capacity of an &lt;b&gt;ArrayList&lt;/b&gt; before adding a large
number of elements using &lt;b&gt;ensureCapacity()&lt;/b&gt; operation. This &lt;i&gt;could
reduce the amount of incremental reallocation&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LinkedList
&lt;ul class="org-ul"&gt;
&lt;li&gt;It is a &lt;b&gt;doubly-linked&lt;/b&gt; list implementation of the &lt;code&gt;List&lt;/code&gt; and
&lt;code&gt;Deque&lt;/code&gt; interface.
&lt;/li&gt;
&lt;li&gt;Operations that index into the list will traverse the list from
&lt;i&gt;the beginning or the end&lt;/i&gt;, whichever is closer to the specified
index.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-6-4" class="outline-4"&gt;
&lt;h4 id="sec-1-6-4"&gt;Queue and Deque&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-6-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;interface &lt;b&gt;Queue&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Queue implementations generally do not allow insertion of &lt;code&gt;null&lt;/code&gt;
elements, although some implementations, such as &lt;b&gt;LinkedList&lt;/b&gt;, do
not prohibit insertion of &lt;code&gt;null&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Even in the implementations that permit it, &lt;code&gt;null&lt;/code&gt; should not be
inserted into a &lt;b&gt;Queue&lt;/b&gt;, as &lt;code&gt;null&lt;/code&gt; is also used as a &lt;span class="underline"&gt;special return&lt;/span&gt;
value by the &lt;code&gt;poll&lt;/code&gt; method to &lt;i&gt;indicate that the queue contains no
elements&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;Queues provide additional insertion, extraction, and
inspection operations; and each of these methods exists in two
forms: &lt;b&gt;throw exception&lt;/b&gt; or &lt;b&gt;return special value&lt;/b&gt; when the
operation fails.
&lt;/li&gt;
&lt;li&gt;The latter form of the insert operation is designed specifically
for use with &lt;b&gt;capacity-restricted&lt;/b&gt; Queue implementations; in most
implementations, insert operations cannot fail.
&lt;/li&gt;
&lt;li&gt;The two set of methods:
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Operation&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Throws Exception&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Return special value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;Insert&lt;/td&gt;
&lt;td class="left"&gt;add(e)&lt;/td&gt;
&lt;td class="left"&gt;offer(e)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;Remove&lt;/td&gt;
&lt;td class="left"&gt;remove()&lt;/td&gt;
&lt;td class="left"&gt;poll()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;Examine&lt;/td&gt;
&lt;td class="left"&gt;element()&lt;/td&gt;
&lt;td class="left"&gt;peek()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;Order for Queue is normally &lt;b&gt;FIFO&lt;/b&gt;, except for &lt;b&gt;priority
queues&lt;/b&gt;, which order according to a supplied comparator, and
&lt;b&gt;LIFO&lt;/b&gt; queue(stack).
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;interface &lt;b&gt;Deque&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Pronounced "deck" is an extension of Queue, and allows additon and
removal from either end of the data structure.
&lt;/li&gt;
&lt;li&gt;For each methods defined in &lt;code&gt;Queue&lt;/code&gt;, &lt;code&gt;Deque&lt;/code&gt; defines corresponding
&lt;b&gt;First&lt;/b&gt;, and &lt;b&gt;Last&lt;/b&gt; methods like: &lt;code&gt;addFirst()&lt;/code&gt;, &lt;code&gt;addLast()&lt;/code&gt;,
&lt;code&gt;offerFirst()&lt;/code&gt; and &lt;code&gt;offerLast()&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;descendingIterator()&lt;/b&gt;  from the &lt;code&gt;Deque&lt;/code&gt; interface can be used to
iterate in reverse sequential order.
&lt;/li&gt;
&lt;li&gt;Deques can also be used as &lt;b&gt;LIFO (Last-In-First-Out) stacks&lt;/b&gt;. This
interface should be used &lt;b&gt;in preference to&lt;/b&gt; the &lt;b&gt;legacy&lt;/b&gt; &lt;code&gt;Stack&lt;/code&gt;
class:
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Stack Method&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Equivalent Deque Method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;push(e)&lt;/td&gt;
&lt;td class="left"&gt;addFirst(e)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;pop()&lt;/td&gt;
&lt;td class="left"&gt;removeFirst(e)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;peed()&lt;/td&gt;
&lt;td class="left"&gt;peekFirst()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeFirstOccurrence(e)&lt;/code&gt; and &lt;code&gt;removeLastOccurrence(e)&lt;/code&gt; is
available on &lt;b&gt;LinkedList&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;Apart from &lt;b&gt;LinkedList&lt;/b&gt;, &lt;b&gt;ArrayDeque&lt;/b&gt; is a resizable-array
implementation of the &lt;code&gt;Deque&lt;/code&gt; interface.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;class &lt;b&gt;PriorityQueue&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;An unbounded priority queue based on a &lt;b&gt;priority heap&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;A priority queue does not permit &lt;code&gt;null&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;A priority queue is &lt;b&gt;unbounded&lt;/b&gt;, but has an &lt;i&gt;internal capacity&lt;/i&gt;
governing the size of an array used to store the elements on the
queue.
&lt;/li&gt;
&lt;li&gt;The &lt;b&gt;Iterator&lt;/b&gt; returned from  &lt;code&gt;iterator()&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; gaurantee to
traverse the elements in any particular order. If ordered
traversal is needed, could use : &lt;code&gt;Arrays.sort(pq.toArray())&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;This class is not threadsafe, &lt;b&gt;PriorityBlockingQueue&lt;/b&gt; is.
&lt;/li&gt;
&lt;li&gt;Heap based priority queue provides \(O(\log(n))\) for enqueing
dequeing methods; linear time for &lt;code&gt;remove()&lt;/code&gt; and &lt;code&gt;contains()&lt;/code&gt; methods
and constant time for the retrieval methods.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;interface &lt;b&gt;BlockingQueue&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A &lt;b&gt;Queue&lt;/b&gt; that additionally supports operations that &lt;b&gt;wait&lt;/b&gt; for the
queue to become non-empty when retriving an element, and wait for
space to become available in the queue when storing an element.
&lt;/li&gt;
&lt;li&gt;BlockingQueue methods come in four forms:
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Operation&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Throw Exception&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Special Value&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Blocks&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Times out&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;Insert&lt;/td&gt;
&lt;td class="left"&gt;add(e)&lt;/td&gt;
&lt;td class="left"&gt;offer(e)&lt;/td&gt;
&lt;td class="left"&gt;put(e)&lt;/td&gt;
&lt;td class="left"&gt;offer(e, time, unit)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;Remove&lt;/td&gt;
&lt;td class="left"&gt;remove()&lt;/td&gt;
&lt;td class="left"&gt;poll()&lt;/td&gt;
&lt;td class="left"&gt;take()&lt;/td&gt;
&lt;td class="left"&gt;poll(time, unit)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;Examine&lt;/td&gt;
&lt;td class="left"&gt;element()&lt;/td&gt;
&lt;td class="left"&gt;peek()&lt;/td&gt;
&lt;td class="left"&gt;n/a&lt;/td&gt;
&lt;td class="left"&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;A blockingQueue does not accept null element.
&lt;/li&gt;
&lt;li&gt;BlockingQueue implementations are designed to be used primarily
for &lt;b&gt;producer-consumer&lt;/b&gt; queues, but additionally support the
&lt;b&gt;Collection&lt;/b&gt; interface. However, such operations are in general &lt;b&gt;not&lt;/b&gt;
&lt;i&gt;performed very efficiently&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;drainTo(Collection c)&lt;/b&gt; removes all available elements from this
queue and adds them to the given collection. This operation may be
more efficient than repeatdly polling thes queue.
&lt;/li&gt;
&lt;li&gt;BlockingQueue implementations are thread. However, the &lt;b&gt;bulk&lt;/b&gt;
Collection operations &lt;code&gt;addAll&lt;/code&gt;, &lt;code&gt;containsAll&lt;/code&gt;, &lt;code&gt;retainAll&lt;/code&gt; and &lt;code&gt;removeAll&lt;/code&gt;
are &lt;b&gt;not&lt;/b&gt; necessarily &lt;i&gt;performed atomically&lt;/i&gt; unless specified
otherwise in an implementation.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Memory consistency effects&lt;/b&gt;: As with other concurrent collections,
actions in a thread prior to &lt;b&gt;placing an object&lt;/b&gt; into a
BlockingQueue &lt;b&gt;happen-before&lt;/b&gt; actions subsequent to the &lt;b&gt;access&lt;/b&gt; or
&lt;b&gt;removal&lt;/b&gt; of that element from the BlockingQueue in another thread.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LinkedBlockingQueue&lt;/b&gt; is an optionally-bounded blocking queue. The
optional capacity serves as a way to prevent excessive queue
expansion, which default to &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ArrayBlockingQueue&lt;/b&gt; is a bounded blocking queue backed by an
array. The capacity cannot be changed once created.
&lt;ul class="org-ul"&gt;
&lt;li&gt;This class supports an optional &lt;b&gt;fairness policy&lt;/b&gt; for &lt;b&gt;ordering&lt;/b&gt;
waiting producer and consumer threads. &lt;i&gt;By default, the ordering
is not guaranteed&lt;/i&gt;. When setting, the access granted in &lt;b&gt;FIFO&lt;/b&gt; order.
&lt;/li&gt;
&lt;li&gt;Fairness generally decreases &lt;i&gt;throughput&lt;/i&gt; but reduces
&lt;i&gt;variability&lt;/i&gt; and avoids &lt;i&gt;starvation&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SynchronousQueue&lt;/b&gt; is a blocking queue in which each insert
operation must &lt;b&gt;wait for&lt;/b&gt; a corresponding remove operation by
another thread, and vice versa.
&lt;ul class="org-ul"&gt;
&lt;li&gt;A SynchronousQueue doesn't have any internal capacity, not even
a capacity of one.
&lt;/li&gt;
&lt;li&gt;Cannot peek because element is only present when you try to
remove it; you cannot insert an element (using any method)
unless another thread is trying to remove it.
&lt;/li&gt;
&lt;li&gt;its &lt;code&gt;isEmpty()&lt;/code&gt; will always return &lt;code&gt;true&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Synchronous queue are similar to &lt;b&gt;rendezvous channels&lt;/b&gt; used in
&lt;b&gt;CSP&lt;/b&gt; and &lt;b&gt;Ada&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;They are suited for &lt;b&gt;handoff designs&lt;/b&gt;, in which an object running
in one thread must &lt;i&gt;sync up&lt;/i&gt; with an object running in another
thread in order to &lt;span class="underline"&gt;hand it some information, event, or task&lt;/span&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;interface &lt;b&gt;TransferQueue&lt;/b&gt; extends &lt;b&gt;BlockingQueue&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A &lt;b&gt;BlockingQueue&lt;/b&gt; in which producers may wait for consumer to
receive elements.
&lt;/li&gt;
&lt;li&gt;A &lt;b&gt;TransferQueue&lt;/b&gt; may be useful for example in message passing
applications in which producers sometimes (using method
&lt;b&gt;transfer(E)&lt;/b&gt;) await receipt of elements by consumers invoking take
or poll, while at other times enqueue elements (via method put)
without waiting for receipt.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;tryTransfer&lt;/b&gt; can be used for Non-blocking and time-out for way.
&lt;/li&gt;
&lt;li&gt;A &lt;b&gt;TransferQueue&lt;/b&gt; can also be quired, with &lt;b&gt;hasWaitingComsumer()&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;class &lt;b&gt;LinkedTransferQueue&lt;/b&gt; implements this interface.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;i&gt;the size method is &lt;b&gt;NOT&lt;/b&gt; a constant-time operation&lt;/i&gt;: Because of
the asynchronous nature of these queues, determining the current
number of elements requires a traversal of the elements, and so
may report inaccurate results if this collection is modified
during traversal.
&lt;/li&gt;
&lt;li&gt;bulk operations are &lt;b&gt;not&lt;/b&gt; guaranteed to be performed atomically.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;TransferQueue&lt;/b&gt; is more generic and useful than
&lt;b&gt;SynchronousQueue&lt;/b&gt;, allowing you to flexibly decide whether to use
normal BlockingQueue semantics or a guaranteed hand-off.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Much better performance than &lt;b&gt;SynchronousQueue&lt;/b&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;class DelayQueue&amp;lt;E extends Delayed&amp;gt; implements &lt;b&gt;BlockingQueue&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;An unbounded blocking queue of Delayed elements, in which an
element can only be taken when its delay has expired.
&lt;/li&gt;
&lt;li&gt;The head of the queue is the Delayed element whose delay expired
furthest in the past.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-6-5" class="outline-4"&gt;
&lt;h4 id="sec-1-6-5"&gt;Tree&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-6-5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Search with &lt;b&gt;binary search tree&lt;/b&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;toFind&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toFind&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toFind&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compareTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toFind&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toFind&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Inserting value into a binary search tree:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;toInsert&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toInsert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compareTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toInsert&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toInsert&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toInsert&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toInsert&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Inserting in this manner may produce an &lt;b&gt;unbalanced tree&lt;/b&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Removing from a binary search tree:
&lt;ol class="org-ol"&gt;
&lt;li&gt;Search for the node;
&lt;/li&gt;
&lt;li&gt;If the node have no child, just remove it;
&lt;/li&gt;
&lt;li&gt;If the node have only one child, remove the node, and link the
node's parent and child.
&lt;/li&gt;
&lt;li&gt;If the node have two children:
&lt;ol class="org-ol"&gt;
&lt;li&gt;Find a minimu value in the right subtree (or maximum value
in the left three);
&lt;/li&gt;
&lt;li&gt;Replace the value of the node to be removed with found minimum;
&lt;/li&gt;
&lt;li&gt;Remove the minimum from its right tree; notice that the
minimum has no left child, therefore, its removal may result
in first or second cases only.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BSTNode&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
	    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="k"&gt;else&lt;/span&gt;
	    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
	    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="k"&gt;else&lt;/span&gt;
	    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;minValue&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	    &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;minValue&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;minValue&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;A specific implementation of binary tree is called &lt;b&gt;&lt;a href="http://www.geeksforgeeks.org/avl-tree-set-1-insertion/"&gt;AVL Tree&lt;/a&gt;&lt;/b&gt;
(self-balancing) enforces that, for any node, the &lt;i&gt;difference in
depth for each child is at most one&lt;/i&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;After each insertion or deletion of a node, the tree checks if
it is still balanced, and subsequently &lt;b&gt;rotates&lt;/b&gt; the nodes of
values where the property of the &lt;b&gt;AVL Tree&lt;/b&gt; doesn't not hold.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;a href="http://www.geeksforgeeks.org/red-black-tree-set-1-introduction-2/"&gt;Red-Black Tree&lt;/a&gt;&lt;/b&gt; is another self-balancing binary search tree with
one extra attribute for each node: &lt;b&gt;the colour&lt;/b&gt;, being either red
or black:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Properties:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Root of the tree is always black.
&lt;/li&gt;
&lt;li&gt;There are no two adjacent red nodes (A red node cannot have a
red parent or red child)
&lt;/li&gt;
&lt;li&gt;Every path from &lt;i&gt;root to a NULL&lt;/i&gt; node has same number of black
node.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The height of a Red-Black Tree is always \(O(\log(n))\), i.e. it is a
balanced tree.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Comparison of AVL Tree and Red-Black Tree:
&lt;ul class="org-ul"&gt;
&lt;li&gt;AVL Tree is more balanced - better for search
&lt;/li&gt;
&lt;li&gt;AVL Tree's deletion/insertion may involved more
roations. Red-Black tree is better for insert/deletion.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When a tree is balanced, search/insert/delete has performance of
\(O(\log(n))\).
&lt;/li&gt;
&lt;li&gt;Bineary trees can be used for &lt;b&gt;Binary Heap&lt;/b&gt;, which is a balanced
tree with the property that children are &lt;b&gt;greater than&lt;/b&gt; their parent.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The heat property defines that the smallest element in the tree is
at the root. Heaps are especially useful for priority queues, or
any time you require quick access to the smallest element of a collection.
&lt;/li&gt;
&lt;li&gt;A heap is not a sorted structure and can be regarded as
partially ordered.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Insert&lt;/b&gt;: the new element is initially appended to the right
most leaf node. The heap property is repaired by comparing the
added element with its parent and moving the added element up a
level by swapping with parent. It is repeated until the parent
is smaller or equal to the element. Performance is \((\log(n))\).
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DeleteMin&lt;/b&gt;: Remove the root and replace it the right most
leaf. Then compare with its &lt;b&gt;smaller&lt;/b&gt; child, and swapping until the
heap property is satisfied. Performance is \((\log(n))\).
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;HeapSort&lt;/b&gt;: build a heap and turn it into a sorted list by
calling &lt;b&gt;deleteMin&lt;/b&gt; repeatly. It has performance of \((n\log(n))\).
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6-6" class="outline-4"&gt;
&lt;h4 id="sec-1-6-6"&gt;Set&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-6-6"&gt;
&lt;p&gt;
For each of the Map implementation visited ealier, there is an
equvialent Set implementation:
&lt;/p&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt; HashSet &lt;/dt&gt;&lt;dd&gt;implemented based on HashMap with dummy values (same
Object is used for every value).
&lt;/dd&gt;
&lt;dt&gt; TreeSet &lt;/dt&gt;&lt;dd&gt;based on a TreeMap instance.
&lt;/dd&gt;
&lt;dt&gt; (no term) &lt;/dt&gt;&lt;dd&gt;LinkedHashSet:: based on a LinkedHashMap instance.
&lt;/dd&gt;
&lt;dt&gt; (no term) &lt;/dt&gt;&lt;dd&gt;&lt;b&gt;SortedSet&lt;/b&gt; and &lt;b&gt;NavigableSet&lt;/b&gt; implemented by &lt;b&gt;TreeSet&lt;/b&gt;.
&lt;/dd&gt;
&lt;dt&gt; (no term) &lt;/dt&gt;&lt;dd&gt;&lt;b&gt;Set &amp;lt;E&amp;gt; Collections.newSetFromMap(Map&amp;lt;E, Boolean&amp;gt; map)&lt;/b&gt; returns a
set backed by the specified map. The resulting set displays the same
ordering, concurrency, and performance characterstics as the backing
map.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Useful to construct Set that doesn't have corresponding Set
implementation of a Map, like &lt;b&gt;WeakHashSet&lt;/b&gt;, or
&lt;b&gt;ConcurrentHashMap&lt;/b&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6-7" class="outline-4"&gt;
&lt;h4 id="sec-1-6-7"&gt;Map&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-6-7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;HashMap
&lt;ul class="org-ul"&gt;
&lt;li&gt;The implementation permits &lt;code&gt;null&lt;/code&gt; values and &lt;code&gt;null&lt;/code&gt; key.
&lt;/li&gt;
&lt;li&gt;An instance of HashMap has two parameters that affect its
performance: &lt;b&gt;initial capacity&lt;/b&gt; and &lt;b&gt;load factor&lt;/b&gt;. The capacity is
the &lt;i&gt;number of buckets&lt;/i&gt; in the hash table. The load factor is a
measure of how full the hash table is allowed to get before its
capacity is automatically increased.
&lt;/li&gt;
&lt;li&gt;When the number of entries in the hash table
&lt;code&gt;loadFactor*currentCapacity&lt;/code&gt;, the hash table is &lt;b&gt;rehashed&lt;/b&gt; so that
the hash table has approximately &lt;b&gt;twice&lt;/b&gt; the number of buckets.
&lt;/li&gt;
&lt;li&gt;When construct a new HashMap, a &lt;b&gt;load factor&lt;/b&gt; between [0, 1] can
be specified: &lt;code&gt;public HashMap(int initialCapacity, float
    loadFactory)&lt;/code&gt;. The default load factor is 0.75.
&lt;/li&gt;
&lt;li&gt;If the initial capacity is greater than the maximum number of
entries divided by the load factor, no rehash operations will ever
occur.
&lt;/li&gt;
&lt;li&gt;If many mappings are to be stored in a HashMap instance, creating
it with a sufficiently large capacity will allow the mappings to
be stored more efficiently than letting it perform automatic
rehashing as needed to grow the table.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;keySet()&lt;/b&gt;, &lt;b&gt;values()&lt;/b&gt; and &lt;b&gt;entrySet()&lt;/b&gt; all provide &lt;b&gt;view&lt;/b&gt; &lt;i&gt;backed&lt;/i&gt;
by the map. Map's changes are reflected in the set, and
vise-verse. If elements are removed from the view, the
corresponding mappings are &lt;b&gt;removed&lt;/b&gt; from the map.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LinkedHashMap&lt;/b&gt; is similar to HashMap but have an added property
that iterating over the &lt;b&gt;keys&lt;/b&gt; will be in the same order as
&lt;b&gt;insertion&lt;/b&gt;. However, this is the most expensive JDK collection in
terms of memory consumption per element.
&lt;/li&gt;
&lt;li id="interface &amp;lt;b&amp;gt;SortedMap&amp;lt;/b&amp;gt;"&gt;A map that provides a total ordering on its
keys.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The order is reflected when iterating over the sorted map's
collection views (returned by &lt;code&gt;entrySet&lt;/code&gt;, &lt;code&gt;keySet&lt;/code&gt;, and &lt;code&gt;values&lt;/code&gt; methods).
&lt;/li&gt;
&lt;li&gt;Implements by &lt;b&gt;TreeMap&lt;/b&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li id="interface &amp;lt;b&amp;gt;NavigableMap&amp;lt;/b&amp;gt;"&gt;A &lt;b&gt;SortedMap&lt;/b&gt; extended with navigation
methods returning the closest matches for given search target.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;lowEntry&lt;/code&gt;, &lt;code&gt;flowEntry&lt;/code&gt;, &lt;code&gt;ceilingEntry&lt;/code&gt;, &lt;code&gt;higherEntry&lt;/code&gt; returns
&lt;code&gt;Map.Entry&lt;/code&gt; objects whose key respectively &lt;i&gt;less then&lt;/i&gt;, &lt;i&gt;less than
or equal&lt;/i&gt;, &lt;i&gt;greater than or equal&lt;/i&gt;, &lt;i&gt;greater than&lt;/i&gt; the given key.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headMap(until)&lt;/code&gt;, &lt;code&gt;tailMap(from)&lt;/code&gt;, and &lt;code&gt;subMap(from, to)&lt;/code&gt; return
subset of the mapping entries given the search condition.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TreeMap implements both &lt;b&gt;SortedMap&lt;/b&gt; and &lt;b&gt;NavigableMap&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;It uses a &lt;b&gt;red-black tree&lt;/b&gt; with each node in the tree is a
key-value pair.
&lt;/li&gt;
&lt;li&gt;Each elements put into the TreeMap rebalanced the tree.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EnumMap - a map with enum keys
&lt;/li&gt;
&lt;li id="&amp;lt;b&amp;gt;IdentityHashMap&amp;lt;/b&amp;gt;"&gt;it a special version of map. It &lt;b&gt;violates&lt;/b&gt; the
Map general contract : it compares references using &lt;code&gt;==&lt;/code&gt; instead of
&lt;code&gt;Object.equals&lt;/code&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Useful for various graph traversal algorithms: you may easily
store already processed nodes in the &lt;b&gt;IdentityHashMap&lt;/b&gt; along with
some node-related data.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li id="&amp;lt;b&amp;gt;WeakHashMap&amp;lt;/b&amp;gt;"&gt;keeps its key with WeakReference, which is subject to
GC. Values are, however, stored using strong
reference.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Useful for data cache implementations.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6-8" class="outline-4"&gt;
&lt;h4 id="sec-1-6-8"&gt;Concurrent Collections&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-6-8"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;CopyOnWriteArrayList&lt;/b&gt;: making a copy of underlying array on each
update. Should be used when traversal seriously outnumbering
updates.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Useful for listener/observers.
&lt;/li&gt;
&lt;li&gt;No synchronization is necessary, even during iteration.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CopyOnWriteArraySet&lt;/b&gt;: based on a copy-on-write array.
&lt;/li&gt;
&lt;li id="&amp;lt;b&amp;gt;ConcurrentHashMap&amp;lt;/b&amp;gt;"&gt;
&lt;/li&gt;&lt;li id="&amp;lt;b&amp;gt;ConcurrentLinkedQueue&amp;lt;/b&amp;gt;"&gt;A unbounded thread-safe queue based on
linked nodes.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ConcurrentSkipListMap&lt;/b&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-1-7" class="outline-3"&gt;
&lt;h3 id="sec-1-7"&gt;Java 8 Stream&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The processing Order
&lt;ul class="org-ul"&gt;
&lt;li&gt;Intermediate operations will only be executed when a terminal
operation is present.
&lt;/li&gt;
&lt;li&gt;Each elements in the stream moves along the chain vertically, not
all elements processed together in each intermediate operations.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reusing Streams.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Java 8 stream cannot be reused.
&lt;/li&gt;
&lt;li&gt;As soon as you call any terminal operation, the stream is closed.
&lt;/li&gt;
&lt;li&gt;We have to create a new stream chain for every terminal operation
we want to execute.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intermediate operations.
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Function&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Preserve count&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Preserve type&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Perserve order&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;td class="left"&gt;N&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/td&gt;
&lt;td class="left"&gt;N&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;code&gt;distinct&lt;/code&gt;&lt;/td&gt;
&lt;td class="left"&gt;N&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;code&gt;sorted&lt;/code&gt;&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;td class="left"&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;code&gt;peek&lt;/code&gt;&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;td class="left"&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Collectors&lt;/b&gt; : transform the elements of the stream into a different
kind of result.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;toList&lt;/code&gt;, &lt;code&gt;toSet&lt;/code&gt;, &lt;code&gt;toMap&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;averagingInt&lt;/code&gt;, &lt;code&gt;summarizingInt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;joining&lt;/code&gt;: accepts a delimiter and optional prefix and suffix.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One important thing to note is that parallel streams achieve
parallelism through threads using the existing common
&lt;b&gt;ForkJoinPool&lt;/b&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;As a result, there are possible complications:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://zeroturnaround.com/rebellabs/java-parallel-streams-are-bad-for-your-health/"&gt;https://zeroturnaround.com/rebellabs/java-parallel-streams-are-bad-for-your-health/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The common pool is upper limited (can be changed with a system
property) with &lt;code&gt;Runtime.availableProcessors()&lt;/code&gt;, it is possible
to block all the threads in it and thus exhaust the pool.
&lt;/li&gt;
&lt;li&gt;If you know the Job in the parallel stream is going to block for
some time, it will be better to use a &lt;code&gt;interface
      ForkJoinPool.ManagedBlocker&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parallel streams are &lt;b&gt;unpredictable&lt;/b&gt; and complex to use correctly.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Almost any use of parallel streams can affect the performance of
other &lt;b&gt;unrelated&lt;/b&gt; system components in an &lt;b&gt;unpredictable way&lt;/b&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Starvation&lt;/b&gt; describes a situation where a thread is unable to gain
regular access to shared resources and is unable to make
progress.
&lt;ul class="org-ul"&gt;
&lt;li&gt;This happens when shared resources are made unavailable for long
periods by "greedy" threads.
&lt;/li&gt;
&lt;li&gt;For example, suppose an object provides a synchronized method
that often takes a long time to return.
&lt;/li&gt;
&lt;li&gt;If one thread invokes this method frequently, other threads that
also need frequent synchronized access to the same object will
often be blocked.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Livelock&lt;/b&gt; A thread often acts in response to the action of another
thread. If the other thread's action is also a response to the
action of another thread, then livelock may result.
&lt;ul class="org-ul"&gt;
&lt;li&gt;As with deadlock, livelocked threads are unable to make further
progress.
&lt;/li&gt;
&lt;li&gt;However, the threads are not blocked â they are simply too busy
responding to each other to resume work.
&lt;/li&gt;
&lt;li&gt;This is comparable to two people attempting to pass each other
in a corridor: Alphonse moves to his left to let Gaston pass,
while Gaston moves to his right to let Alphonse pass. Seeing
that they are still blocking each other, Alphone moves to his
right, while Gaston moves to his left. They're still blocking
each other, soâ¦
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-8" class="outline-3"&gt;
&lt;h3 id="sec-1-8"&gt;Design Patterns&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-8"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt; Strategy Pattern &lt;/dt&gt;&lt;dd&gt;enables you to defer decisions about which
implementation to use until &lt;i&gt;run time&lt;/i&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The Spring Framework uses an XML file to construct objects and
their dependencies, which are read at runtime, allowing a quick
change between implementations without any need for recompilation.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Template Pattern &lt;/dt&gt;&lt;dd&gt;is used to defer to delegate some, or all steps
of an algorithm to a subclass. Common behaviour can be defined in
a superclass, then specific variants are written in a subclass.
&lt;/dd&gt;
&lt;dt&gt; Decorator Pattern &lt;/dt&gt;&lt;dd&gt;enables you to change or configure the
functionality of a specific object.
&lt;ul class="org-ul"&gt;
&lt;li&gt;It takes an instance of same abstract/interface type which adds
additional behaviour.
&lt;/li&gt;
&lt;li&gt;Java's IO class use the Decorator Pattern extensively.
&lt;/li&gt;
&lt;li&gt;java.util.Collections, the &lt;code&gt;checkedXXX()&lt;/code&gt;, &lt;code&gt;synchronizedXXX()&lt;/code&gt; and
&lt;code&gt;unmodifiableXXX()&lt;/code&gt; methods.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Flyweight Pattern &lt;/dt&gt;&lt;dd&gt;can be used when you have several objects, and
many may represent the same value. In these instances, it can be
possbile to share the values as long as the objects are immutable.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;Integer&lt;/b&gt; class is an implementation of the flyweight pattern:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;IntegerCache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;high&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;IntegerCache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;IntegerCache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;high&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;IntegerCache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="n"&gt;IntegerCache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;low&lt;/span&gt;&lt;span class="o"&gt;)];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
The default range of the cache is -128 to 127. The cache is
initialized in a static block and is created the first time an
Integer is referenced.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Another implementation of the Flyweight Pattern is called &lt;b&gt;Null
Object Pattern&lt;/b&gt;, which uses a flyweight object to represent
&lt;code&gt;null&lt;/code&gt;. For example in tree implementation, a &lt;b&gt;NullObject&lt;/b&gt; can be
used to represent non-children.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Singleton &lt;/dt&gt;&lt;dd&gt;using &lt;b&gt;Enum&lt;/b&gt;, JVM will guarantee that only one
instance will ever be created.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;SingletonEnum&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;INSTANCE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;singletonMethod&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="c1"&gt;//operation here.&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Singletons work best in specialized applications such as GUI on
a desktop or mobile application. Or you know you will not have
many concurrent users.
&lt;/li&gt;
&lt;li&gt;If you are building large, scalable server applications,
singleton objects are often the source of many performance
bottlenecks.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.lang.Runtime#getRuntime()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.awt.Desktop#getDesktop()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Abstract Factory &lt;/dt&gt;&lt;dd&gt;creational methods returning the &lt;b&gt;factory
itself&lt;/b&gt; which in turn can be used to create other abstract types.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;javax.xml.parsers.DocumentBuilderFactory#newInstance()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javax.xml.transform.TransformerFactory#newInstance()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Factory Method &lt;/dt&gt;&lt;dd&gt;Creational methods returning an implementation of
an abstract/interface type.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;java.util.Calendar#getInstance()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.util.ResourceBundle#getBundle()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.text.NumberFormat#getInstance()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.nio.charset.Charset#forName()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; (no term) &lt;/dt&gt;&lt;dd&gt;Builder
&lt;ul class="org-ul"&gt;
&lt;li&gt;The Implementations of &lt;b&gt;java.lang.Appendable&lt;/b&gt; are
builders. &lt;b&gt;Appendable&lt;/b&gt; is an object which char sequences
(&lt;b&gt;java.lang.CharSequence&lt;/b&gt;) and values can be appended. It must be
implemented by class whose instances are intended to receive
formatted output from a Formatter.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Prototype &lt;/dt&gt;&lt;dd&gt;Creational methods returning a different instance of
itself with same properties
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;java.lang.Object#clone()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Chain of Responsibility &lt;/dt&gt;&lt;dd&gt;Behaviour methods which indirectly
invokes the same method in another implementation of same
abstract/interface type &lt;b&gt;in a queue&lt;/b&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;java.util.logging.Logger#log()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javax.servlet.Filter#doFilter()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; State &lt;/dt&gt;&lt;dd&gt;Behaviour methods which changes its behaviour depending on
the instance's state, which can be controlled externally.
&lt;ul class="org-ul"&gt;
&lt;li&gt;provides behaviour to an object so that it can be changed during
runtime.
&lt;/li&gt;
&lt;li&gt;Very similar to &lt;b&gt;Bridge&lt;/b&gt; pattern but intention is different:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Bridge is structural: hide data from client, and client only
aware of the handle.
&lt;/li&gt;
&lt;li&gt;State is behavioral: provides &lt;i&gt;flexible behavior&lt;/i&gt; of owning object
and client would be aware of &lt;b&gt;both&lt;/b&gt; owning object and state objects.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Bridge &lt;/dt&gt;&lt;dd&gt;decouples an abstraction from the implementation of its
abstract operations, so that abstraction and its
implementation can vary &lt;b&gt;independently&lt;/b&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;AWT: provides an abstract layer which maps onto the native OS.
&lt;/li&gt;
&lt;li&gt;JDBC
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Template method &lt;/dt&gt;&lt;dd&gt;allows subclasses to override parts of the method
without rewriting it; also allow you to control whichh operations
subclasses are required to override.
&lt;/dd&gt;
&lt;dt&gt; Adapter &lt;/dt&gt;&lt;dd&gt;convert the interface of a class into another interface
clients expect.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;java.io.InputStreamReader&lt;/code&gt;, &lt;code&gt;java.io.OutputStreamWriter&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt; Memento &lt;/dt&gt;&lt;dd&gt;capture the internal state of an object without violating
encapsulation and thus providing a mean for restoring the
object into initial state when needed.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;java.util.Date&lt;/code&gt;: internally represented by a long value.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.io.Serializable&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-9" class="outline-3"&gt;
&lt;h3 id="sec-1-9"&gt;Datatype&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-9"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Two's Complement representation
&lt;ul class="org-ul"&gt;
&lt;li&gt;Storage of binary values of short, int, and long.
&lt;/li&gt;
&lt;li&gt;The negative equivalent of possitive value is calculated by
applying a binary NOT and then add 1.
&lt;/li&gt;
&lt;li&gt;There is only one value for zero: there is no concept of a
negative zero.
&lt;/li&gt;
&lt;li&gt;Which in tun, means the system can store one extra negative value.
&lt;/li&gt;
&lt;li&gt;The most negative number(&lt;b&gt;Integer.MIN&lt;sub&gt;VALUE&lt;/sub&gt;&lt;/b&gt;), has the most
significant bit of 1, and all remaining bits are zeros.
&lt;/li&gt;
&lt;li&gt;The most negative number's abs() will fail, no corresponding
positive value for it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li id="BigInteger"&gt;Immutable &lt;b&gt;arbitrary-precision&lt;/b&gt; integers.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Effectively unbounded.
&lt;/li&gt;
&lt;li&gt;Has all the methods that can would normally applied on an Integer.
&lt;/li&gt;
&lt;li&gt;All operations behave as if BigIntegers were represented in
&lt;b&gt;two's-complement&lt;/b&gt; notation (like Java's primitive integer types).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcd(BigInteger val)&lt;/code&gt;: return the greatest common divisor.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isProbablyPrime()&lt;/code&gt; : return ture if is probably prime, false if
it definitely composite.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li id="BigDecimal"&gt;Immutable &lt;b&gt;arbitrary-precision&lt;/b&gt; decimal numbers.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AtomicLong&lt;/b&gt; and &lt;b&gt;AtomicInteger&lt;/b&gt; are also subclass of &lt;b&gt;Number&lt;/b&gt;.
&lt;/li&gt;
&lt;li id="&amp;lt;b&amp;gt;String&amp;lt;/b&amp;gt;"&gt;&lt;ul class="org-ul"&gt;
&lt;li&gt;String constructor which take byte or char array, will copy the
array for the String.
&lt;/li&gt;
&lt;li&gt;static methods
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;format(String format, Object... args)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join(CharSequence delimiter, CharSequence... elements)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;String intern: When the class is loaded by the JVM, it holds all
the literals in a constants pool. Any repettion of a String
literal can be referenced from the same constant in the pool.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The String intern pool is not just open to compile-time String
literals; any String instance can be added to this pool with the
intern() method.
&lt;/li&gt;
&lt;li&gt;When the intern method is invoked, if the pool already contains
a string equal to this String object as determined by the
&lt;code&gt;equals(Object)&lt;/code&gt; method, then the string from the pool is
returned. Otherwise, this String object is added to the pool and
a reference to this String object is returned.
&lt;/li&gt;
&lt;li&gt;It follows that for any two strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;s.intern() ==
      t.intern()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;s.equals(t)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;In Java 6, interned strings were stored in the &lt;b&gt;PermGen&lt;/b&gt; â the
&lt;b&gt;fixed size&lt;/b&gt; part of heap mainly used for storing loaded classes
and string pool. using intern() might lead to out of memory in
the &lt;b&gt;PermGen&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;Since Java 7: the string pool was relocated to the heap.
&lt;/li&gt;
&lt;li&gt;String pool values can be GC as well.
&lt;/li&gt;
&lt;li&gt;String pool is implemented as a HashMap, with its key being its
hashcode. and the map size can be set with &lt;code&gt;-XX:StringTableSize&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;The String constant pool is an implementation of the &lt;b&gt;Flyweight&lt;/b&gt;
      pattern.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception
&lt;ul class="org-ul"&gt;
&lt;li&gt;the author's opition is to favor runtime exceptions and be
explicit in any documentation as to what exactly may be thrown to
any clients calling that method.
&lt;/li&gt;
&lt;li&gt;Modern languages such as &lt;b&gt;Scala&lt;/b&gt; have stepped away from checked
exceptions, and have only runtime exceptions.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why do fields that are private also need to be marked as final to
make them immutable?
&lt;ul class="org-ul"&gt;
&lt;li&gt;The private field can be manipulated using the &lt;b&gt;Reflection
API&lt;/b&gt;. Reflection API has the ability to access and mutate all
fields, regardless of their visibility.
&lt;/li&gt;
&lt;li&gt;The final modifier instructs the JVM that no modifications are
allowed on that field at all.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-10" class="outline-3"&gt;
&lt;h3 id="sec-1-10"&gt;Libraries&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-10"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;It is advisiable to use the &lt;b&gt;expected&lt;/b&gt; parameter on the &lt;b&gt;@Test&lt;/b&gt;
annotation sparingly. The most reliable tests using this parameter
have only one line in the method body: the line that should throw
the exception.
&lt;/li&gt;
&lt;li&gt;How can a test fail if it does not complete quickly enough?
&lt;ul class="org-ul"&gt;
&lt;li&gt;The @Test annotation can take a &lt;b&gt;timeout&lt;/b&gt; parameter, which takes a
value of type long.
&lt;/li&gt;
&lt;li&gt;If the test is running for longer than the timeout specified, the
test fails.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Functional Programming in Java&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The &lt;code&gt;Iterable&lt;/code&gt; interface has been enhanced in Java 8 with a special
method &lt;code&gt;forEach()&lt;/code&gt;, which accept a &lt;code&gt;Consumer&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;However, once &lt;code&gt;forEach&lt;/code&gt; starts, we cannot break out of the
iteration.
&lt;/li&gt;
&lt;li&gt;Thus this style is useful in the common case where we want to
process each element in a collection.
&lt;/li&gt;
&lt;li&gt;Lambda function with inferred parameters: the parameters are
&lt;code&gt;non-final&lt;/code&gt;.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//or, with the inferred type, cannot specify final here.&lt;/span&gt;
&lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//or.&lt;/span&gt;
&lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;In Java you can use lambdas and method references when any &lt;b&gt;SAM&lt;/b&gt;
  (single abstract method) interface is expected.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Lambdas can be freely converted to SAM Types.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Predicate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;startsWithN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"N"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//or using a Lexical scoping with closure.&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Predicate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;checkIfStartsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//or with *Function* Interface.&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Predicate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;startsWithLetter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;This can also help with reuse of lambda expression, if it is
used multiple times.
&lt;/li&gt;
&lt;li&gt;From within a lambda expression we can only access local
variables that are &lt;code&gt;final&lt;/code&gt; or &lt;code&gt;effectively final&lt;/code&gt; in the
enclosing scope.
&lt;/li&gt;
&lt;li&gt;A lambda expression may be invoked right away, or it may be
invoked lazily or from multiple thread.
&lt;/li&gt;
&lt;li&gt;To avoid race conditions, the local variables we access in the
enclosing scope are not allowed to change once initialized.
&lt;/li&gt;
&lt;li&gt;Variables either marked as &lt;code&gt;final&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Or for &lt;code&gt;effectively final&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;the variables have to be initialized within the enclosing
method before the lambda expression is defined.
&lt;/li&gt;
&lt;li&gt;the values of these variable don't change anywhere else.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Scala, it is only supported from version 2.12, so a scala
function literal can be used for a &lt;b&gt;SAM&lt;/b&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;If a &lt;code&gt;trait/abstract class&lt;/code&gt; with exactly one &lt;code&gt;abstract&lt;/code&gt; method,
then a &lt;b&gt;Function&lt;/b&gt; of the same parameter and return type of the
abstract method can be converted into the &lt;code&gt;trait/abstract
      class&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Flyable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;miles&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Unindentified Flyable Object"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;ufo&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Flyable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;s"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ufo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; flies &lt;/span&gt;&lt;span class="si"&gt;$m&lt;/span&gt;&lt;span class="s"&gt; miles"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ufo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//Unidentified Flyable Object files 123 miles!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Picking an element from collection, using &lt;code&gt;findFirst()&lt;/code&gt; method,
which return a &lt;code&gt;Optional&lt;/code&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foundName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
   &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"N"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findFirst&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reduce&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;An &lt;code&gt;Optional reduce(BinaryOperator bo)&lt;/code&gt; example, finding the name with the longest length:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;aLongName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
   &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;
     &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;name1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name2&lt;/span&gt;&lt;span class="o"&gt;)=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;name2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;name1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;aLongName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ifPresent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A long name: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;As the &lt;code&gt;reduce()&lt;/code&gt; method iterated through the collection, it called
the lambda expression first with the first two elements in the
list.
&lt;/li&gt;
&lt;li&gt;The result is used as the &lt;b&gt;first&lt;/b&gt; parameter in the following calls.
&lt;/li&gt;
&lt;li&gt;The result from the final call is returned as the result of the
&lt;code&gt;reduce()&lt;/code&gt; method call.
&lt;/li&gt;
&lt;li&gt;The result of &lt;code&gt;reduce()&lt;/code&gt; is an &lt;code&gt;Optional&lt;/code&gt; because the collection
on which is called may be empty.
&lt;/li&gt;
&lt;li&gt;If the list had only one element, the &lt;code&gt;reduce()&lt;/code&gt; would return that
element and the lambda expression would not be invoked.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Another form of &lt;code&gt;reduce&lt;/code&gt; looks like:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;steveOrLonger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"steve"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
	    &lt;span class="n"&gt;name1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;name2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;name1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name2&lt;/span&gt;
	&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;It takes a base value, and not return an &lt;code&gt;Optional&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Join elements:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt; has an added convenience method &lt;code&gt;join()&lt;/code&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Under the hood, the &lt;code&gt;join()&lt;/code&gt; method calls upon the &lt;code&gt;StringJoiner&lt;/code&gt;
    to concatenate the values.
&lt;/li&gt;
&lt;li&gt;We could use the &lt;code&gt;reduce()&lt;/code&gt; method to concatenate elements into a
string, but JDK has a &lt;code&gt;collect()&lt;/code&gt; method, which is another form of
&lt;code&gt;reduce&lt;/code&gt; that can help collect values into a target destination:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Collectors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;joining&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringJoiner&lt;/code&gt; gives more control over the format of
concatenation; we can specify a prefix, a suffix, and infix
character sequences.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>java</category><guid>https://example.com/posts/java-interview-questions/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item><item><title>Java Problems</title><link>https://example.com/posts/java-problems/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Unable to connect through SSL/HTTPS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;The problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
When trying to connect through a HTTPS connection, the java
HTTPConnection through the following exception:
&lt;/p&gt;
&lt;p class="verse"&gt;
Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.Alerts.getSSLException(Alerts.java:192) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1509) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.Handshaker.process&lt;sub&gt;record&lt;/sub&gt;(Handshaker.java:914) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:559) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1513) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
Â Â Â Â Â Â Â Â at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0&lt;sub&gt;65]&lt;/sub&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
The HTTPS certficate is issued with letsencrypt.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Cause&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Whenever Java attempts to connect to another application over SSL (e.g.: HTTPS,
IMAPS, LDAPS), it will only be able to connect to that application if
it can trust it.
&lt;/p&gt;

&lt;p&gt;
The way trust is handled in the Java world is that you have a keystore
(typically &lt;b&gt;$JAVA&lt;sub&gt;HOME&lt;/sub&gt;/lib/security/cacerts&lt;/b&gt;), also known as the
&lt;b&gt;truststore&lt;/b&gt;. This contains a list of &lt;b&gt;all&lt;/b&gt; known Certificate
Authority (CA) certificates, and Java will only trust certificates
that are signed by one of those CAs or public certificates that exist
within that keystore.
&lt;/p&gt;

&lt;p&gt;
For example, if we look at the certificate for Atlassian, we can see
that the &lt;b&gt;*.atlassian.com&lt;/b&gt; certificate has been signed by the
intermediate certificates, &lt;b&gt;DigiCert High Assurance EV Root CA&lt;/b&gt; and
&lt;b&gt;DigiCert High Assurance CA-3&lt;/b&gt;. These intermediate certificates have
been signed by the root &lt;b&gt;Entrust.net Secure Server CA&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Theese three certificates combined are referred to as the certificate
chain. As they are all within the Java keystore, Java will trust any
certificates signed by them.
&lt;/p&gt;

&lt;p&gt;
Alternatively, if the &lt;b&gt;.atlassian.com&lt;/b&gt; certificate had been in the
keystore, Java would also trust that site.
&lt;/p&gt;

&lt;p&gt;
This problem is therefore caused by a certificate that is &lt;i&gt;self-signed&lt;/i&gt;
(a CA did not sign it) or &lt;b&gt;a certificate chain that does not exist
within the Java truststore&lt;/b&gt;. Java does not trust the certificate and
fails to connect to the application.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Resolution&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Make sure you have imported the public certificate of the target
instance into the truststore.
&lt;/li&gt;
&lt;li&gt;Make sure any certificates have been imported into the correct
truststore; you may have multiple JRE/JDKs.
&lt;/li&gt;
&lt;li&gt;Check to see that the correct truststore is in use. If
&lt;b&gt;-Djavax.net.ssl.trustStore&lt;/b&gt; has been configured, it will override
the location of the default truststore, which will need to be
checked.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;Specific on the Letsencrypt certificates&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
Up until Java 8u101, Java don't trust Let's Encrypt certificates out
of the box. The truststore of Oracle JDK/JRE contains neither the
Let's Encrypt CA specifically, or the IdenTrust CA that cross signed it.
&lt;/p&gt;

&lt;p&gt;
For a local configuration changes:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keytool -trustcacerts &lt;span class="se"&gt;\&lt;/span&gt;
    -keystore &lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;/jre/lib/security/cacerts &lt;span class="se"&gt;\&lt;/span&gt;
    -storepass changeit &lt;span class="se"&gt;\&lt;/span&gt;
    -noprompt &lt;span class="se"&gt;\&lt;/span&gt;
    -importcert &lt;span class="se"&gt;\&lt;/span&gt;
    -file /etc/letsencrypt/live/hostname.com/chain.pem
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To update the java version to the latest on RaspberryPi, following:
&lt;a href="https://www.linuxbabe.com/desktop-linux/install-oracle-java-8-debian-jessie-raspbian-jessie-via-ppa"&gt;https://www.linuxbabe.com/desktop-linux/install-oracle-java-8-debian-jessie-raspbian-jessie-via-ppa&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>java</category><guid>https://example.com/posts/java-problems/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item><item><title>Java Troubleshotting Note</title><link>https://example.com/posts/java-troubleshooting/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Options/Flags for JVM trobuleshotting&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Core files: If java crashes, for example due to a segmentation
fault, the OS saves to disk a core file (complete dump of the
memory).
&lt;ul class="org-ul"&gt;
&lt;li&gt;On linux, using &lt;code&gt;ulimit -c unlimited&lt;/code&gt; before starting the
application will usually enable core file dump.
&lt;/li&gt;
&lt;li&gt;to force on core file when the application cannot be closed
properly, using &lt;br&gt;
    &lt;code&gt;kill -6 &amp;lt;pid&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heap dump: add &lt;code&gt;-XX:+HeapDUmpOnOutOfMemoryError&lt;/code&gt; flags save java
heap dump to disk if the application runs into an
&lt;b&gt;OutOfMemoryError&lt;/b&gt;. &lt;code&gt;jhat&lt;/code&gt; can be used to inspect the Java heap.
&lt;/li&gt;
&lt;li&gt;Using a continious Java flight recording (JFR).
&lt;ul class="org-ul"&gt;
&lt;li&gt;The JFR events can be extremely helpful to debug a wide range of
issues from &lt;i&gt;memory leaks&lt;/i&gt; to &lt;i&gt;network errors&lt;/i&gt;, high CPU usage/, &lt;i&gt;thread
blocks&lt;/i&gt;, etc.
&lt;/li&gt;
&lt;li&gt;The overhead of running with a continious flight recording is &lt;b&gt;very low&lt;/b&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Verbose GC with &lt;code&gt;-verbosegc&lt;/code&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Does GC run for a long time?
&lt;/li&gt;
&lt;li&gt;Does the free memory decrease over time?
&lt;/li&gt;
&lt;li&gt;Use flags &lt;code&gt;UseGClogFileRotation&lt;/code&gt; and &lt;code&gt;NumberOfGCLogFiles&lt;/code&gt; to set
up log rotation.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Print Java version and JVM flags:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Using &lt;code&gt;-XX:+PrintCommandLineFlags&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;and &lt;code&gt;-showversion&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set up JMC JMX for remote monitoring:
&lt;ul class="org-ul"&gt;
&lt;li&gt;There is no performance overhead in enabling JMX
&lt;/li&gt;
&lt;li&gt;To enable JMX after java application has started using the
diagnostic command &lt;b&gt;ManageAgent.start&lt;/b&gt;, run &lt;br&gt;
    &lt;code&gt;jcmd &amp;lt;pid&amp;gt; help ManagementAgent.start&lt;/code&gt; &lt;br&gt;
    for a list of flags that can be send with the command
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Java Mission Control&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Java Management console (JMX) connects to a running JVM, collects
and displays key characterstics in real time.
&lt;/li&gt;
&lt;li&gt;Java Flight Recordings (JFR) is available to analyze events.
&lt;/li&gt;
&lt;li&gt;JMC can &lt;i&gt;trigger&lt;/i&gt; user &lt;span class="underline"&gt;provided custom actions and rules&lt;/span&gt; for JVM.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DTrace&lt;/b&gt; plugin is an extended &lt;b&gt;DScript&lt;/b&gt; language to produce self
describing events.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;JOverview&lt;/b&gt; plugin is a tool for analyzing heap waste (emtpy/sparse
collections), which use hprof dumps.
&lt;/li&gt;
&lt;li&gt;The JMC plugins connect to JVM using JMX agents.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Java Flight Recordings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The JFR records detailed information about the java runtime and the
java application running in the java runtime with little overhead.
&lt;/li&gt;
&lt;li&gt;Typical events can be threads waiting for locks, GC, periodic CPU
usage data, etc.
&lt;/li&gt;
&lt;li&gt;When creating a flight recording, you select which events should be
saved, which is called a &lt;b&gt;recording template&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;A &lt;b&gt;Continuous Recording&lt;/b&gt; is a recording that is always on and
saves, for example, the last six hours of data.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The default setting for it is to use a recording profile with
extremely low overhead.
&lt;/li&gt;
&lt;li&gt;It is great to always have running. The recoding can be dumped
manually using either &lt;b&gt;JCMD&lt;/b&gt; or &lt;b&gt;JMC&lt;/b&gt;, or set a trigger in JMC to
dump when some criteria is fulfilled.
&lt;/li&gt;
&lt;li&gt;It can be started from the command line using &lt;code&gt;-XX:FlightRecorderOptions&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;b&gt;Profiling Recordings&lt;/b&gt; is a recording that is turned on, runs for
a set amount of time, and then stops. It might have slightly bigger
performance impact. It typical usage includes:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Profile what methods are run the most and where most objects are created.
&lt;/li&gt;
&lt;li&gt;Look for classes that use more and more heap indicating a memory leak.
&lt;/li&gt;
&lt;li&gt;Look for bottle necks due to synchronization.
&lt;/li&gt;
&lt;li&gt;The typical overhead for a profiling recording is about &lt;b&gt;2 precent&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;It can be started at the start of the application using
&lt;code&gt;-XX:StartFlightRecording&lt;/code&gt; option. For example:&lt;br&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -XX:+UnlockCommercialFeatures -XX:+FlightRecorder &lt;span class="se"&gt;\&lt;/span&gt;
     -XX:StartFlightRecording&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;20s,duration&lt;span class="o"&gt;=&lt;/span&gt;60s,name&lt;span class="o"&gt;=&lt;/span&gt;myrecording,&lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C:&lt;span class="se"&gt;\T&lt;/span&gt;EMP&lt;span class="se"&gt;\m&lt;/span&gt;yrecording.jfr,settings&lt;span class="o"&gt;=&lt;/span&gt;profile MyApp
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prior to JDK 8u40 release, the JVM must also have been started with
the flag: &lt;code&gt;-XX:+UnlockCommercialFeatures -XX:FlightRecorder&lt;/code&gt;. Since
&lt;b&gt;JDK 8u40&lt;/b&gt;, the JFR can &lt;i&gt;be enabled during &lt;b&gt;runtime&lt;/b&gt;&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;You can also set up JMC to automatically start or dump a flight
recording if a condition is met.
&lt;ul class="org-ul"&gt;
&lt;li&gt;There are several default triggers set up for common conditions
such as high CPU usage, deadlocked threads, or too large of a live
set.
&lt;/li&gt;
&lt;li&gt;You can choose to create a trigger on &lt;b&gt;any MBean&lt;/b&gt; in the application.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Most GCs in Java have some kind of smaller garbage collections. The
&lt;i&gt;old GC goes through the entire Java heap&lt;/i&gt;, while the other GC might
look at part of the heap. The heap usage after an old collection is
the memory the application is using, which is called the &lt;b&gt;live set&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;For a better way to address memory leaks, look at the &lt;i&gt;&lt;b&gt;Heap After GC&lt;/b&gt;
value in the first and last old GC&lt;/i&gt;. There could be a memory leak when
&lt;i&gt;this value is increasing over time&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Small objects&lt;/i&gt; in Java are allocated in a &lt;b&gt;TLAB (Thread Local Area
Buffer)&lt;/b&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;TLAB is a small memory area where new objects are allocated.
&lt;/li&gt;
&lt;li&gt;Once a TLAB is full, the thread gets a new one. Logging all memory
allocations gives an overhead; therefore, all allocations that
triggered a new TLAB are logged.
&lt;/li&gt;
&lt;li&gt;Larger objects are allocated outside TLAB, which are also logged.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>java</category><guid>https://example.com/posts/java-troubleshooting/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item></channel></rss>