<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Warren Liu (Posts about php)</title><link>https://example.com/</link><description></description><atom:link href="https://example.com/categories/php.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2017 &lt;a href="mailto:n.tesla@example.com"&gt;Warren Liu&lt;/a&gt; </copyright><lastBuildDate>Sat, 15 Jul 2017 10:51:00 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>PHP Note</title><link>https://example.com/posts/notes/php-note/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://example.com/posts/notes/php-note/#sec-1"&gt;Enable xdebug with hhvm/nginx on remote host&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://example.com/posts/notes/php-note/#sec-2"&gt;include/require&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://example.com/posts/notes/php-note/#sec-3"&gt;Namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://example.com/posts/notes/php-note/#sec-4"&gt;Anonymous functions and Clousures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://example.com/posts/notes/php-note/#sec-5"&gt;Logging with Monolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Enable xdebug with hhvm/nginx on remote host&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
In order to enable remote debug, the debug machine (developer machine)
need to be accessible directly from the xdebug server. Xdebug, when inited from
the browser, on the server side, will init the debug session to the
remote/port specified in php.ini.
&lt;/p&gt;

&lt;p&gt;
When the developer machine resides inside the router, the remote
machine nomally won't be able to talk directly ot it.
&lt;/p&gt;

&lt;p&gt;
To enable the above debug scenario:
x- Using ssh's remote forward to forward the xdebug port to local
  machine (developer machine)
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;in php.ini, enable xdebug:
&lt;p class="verse"&gt;
xdebug.enable=1&lt;br&gt;
xdebug.remote&lt;sub&gt;enable&lt;/sub&gt;=1&lt;br&gt;
xdebug.idekey="PHPSTORM"&lt;br&gt;
xdebug.remote&lt;sub&gt;host&lt;/sub&gt;=127.0.0.1&lt;br&gt;
xdebug.remote&lt;sub&gt;port&lt;/sub&gt;=9000&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
where the remote&lt;sub&gt;host&lt;/sub&gt; and remote&lt;sub&gt;port&lt;/sub&gt; will be the address in the ssh
remote forword, xdebug will use this to communicate with the
developer machine.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;in nginx config for hhvm/php fasgcgi, set:
&lt;p class="verse"&gt;
fastcgi&lt;sub&gt;read&lt;/sub&gt;&lt;sub&gt;timeout&lt;/sub&gt; 600;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
to prevent gateway timetout while in the debug session.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;include/require&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;include()&lt;/code&gt; will through a warning if it cannot include the file, but
the rest of the script will run. &lt;code&gt;require()&lt;/code&gt; will throw an error and
halt the script if it cannot include the file.
&lt;/li&gt;
&lt;li&gt;File are included based on the file path given, or if none is
given, the &lt;span class="underline"&gt;include&lt;sub&gt;path&lt;/sub&gt;&lt;/span&gt; specified.
&lt;/li&gt;
&lt;li&gt;If the file isn't found in the &lt;span class="underline"&gt;include&lt;sub&gt;path&lt;/sub&gt;&lt;/span&gt;, &lt;code&gt;include&lt;/code&gt; will
finaly check the calling script's &lt;b&gt;own directory&lt;/b&gt; and the &lt;b&gt;current
working directory&lt;/b&gt; before falling.
&lt;/li&gt;
&lt;li&gt;If a path is defined, either alsolute or relative, &lt;span class="underline"&gt;include&lt;sub&gt;path&lt;/sub&gt;&lt;/span&gt;
    will be ignored.
&lt;/li&gt;
&lt;li&gt;when a file is include, the code it contains inherits the
&lt;b&gt;variable scope&lt;/b&gt; of the line on which the include occurs. However,
all functions and classes defined in the included file have the
&lt;b&gt;global scope&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;If "URL include wrappers" are enabled in PHP, you can specify the
file to  be included using a URL (via HTTP or other supported
wrapper):
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include 'http://www.example.com/file.txt?foo=1&amp;amp;bar=2'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
It also possbile to include a string as a filename using the
&lt;code&gt;data&lt;/code&gt; wrapper:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//get content
$cFile = file_get_contents('crypted.file');
//decrypt the content
$content = decrypte($cFile);

//include this
include("data://text/plain;base64,".base64_encode($content));
//or
include("data://text/plain,".urlencode($content));
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Using $&lt;sub&gt;SERVER['DOCUMENT&lt;/sub&gt;&lt;sub&gt;ROOT']&lt;/sub&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include $_SERVER['DOCUMENT_ROOT']."/lib/sample.lib.php";
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
so the script can be move anyehere in the project without changes.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;If file A includes file B, and B includes file C; the include path
in B should take into account that A, not B, is the active working
directory.
&lt;/li&gt;
&lt;li&gt;To avoid issues caused by the above, as a rule of thumb, never
include files using relative paths:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;?php // prepend.php - autoprepended at the top of your tree
define('MAINDIR',dirname(__FILE__) . '/');
define('DL_DIR',MAINDIR . 'downloads/');
define('LIB_DIR',MAINDIR . 'lib/');

require_once(LIB_DIR . 'excel_functions.php');
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Namespace&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Inside a namespace, when PHP encouters an unqualified Name in a
class name, function or constant context, it resolves with
different priorities:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Class names always resolve to the current namespace name. For
example, to refrence &lt;code&gt;Exception&lt;/code&gt; in a namespace, will need to
qualified it as &lt;code&gt;\Exception&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Function and constants, PHP will fall back to global functions
or constants if a namespaced function or constant does not exist.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Anonymous functions and Clousures&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Anonymous functions are implemented using the &lt;code&gt;Closure&lt;/code&gt; class. It
is converted into instances of the &lt;code&gt;Closure&lt;/code&gt;;
&lt;/li&gt;
&lt;li&gt;Closures may also inherit variables from the parent scope. Any
such variables must be passed to the &lt;code&gt;use&lt;/code&gt; language construct:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$message = 'hello';
$example = function () use ($message) {
    var_dump($message);
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Note that when use &lt;code&gt;use&lt;/code&gt; to import variable inside closure's
scope, the variable is actually being &lt;b&gt;copied&lt;/b&gt; into the closure's
scope, rather than just being make available.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$result = 0;
$three = function() use (&amp;amp;$result){
    var_dump($result);
};
$result++;
$three();
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Inheriting variables from the parent scope is not the same as
using global variables. Global variables exist in the global
scope, which is the same no matter what function is executing.
&lt;/li&gt;
&lt;li&gt;When anonymous functions are declared in the context of a class,
the current class is automatically bound to it, making &lt;code&gt;$this&lt;/code&gt;
available inside of the function's scope.
&lt;/li&gt;
&lt;li&gt;If automatic binding of the current class is not wanted, then
&lt;i&gt;static anonymous function&lt;/i&gt; may be used:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;new class {
    function __construct()
    {
	(static function() {
	    var_dump($this); //$this will be undefined here.
	}();
    }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Logging with Monolog&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;By default, Monolog will use the &lt;code&gt;\Monolog\Handler\StreamHandler&lt;/code&gt;
    to log to the standard error output.
&lt;/li&gt;
&lt;li&gt;Multiple handler can be set with different log level.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$browserHanlder = new \Monolog\Handler\BrowserConsoleHandler(\Monolog\Logger::INFO);
$streamHandler = new \Monolog\Handler\StreamHandler('php://stderr', \Monolog\Logger::ERROR);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
The &lt;code&gt;BrowserConsoleHandler&lt;/code&gt; log the messages to the browser's console.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;There is a bubbling option to allow handler to bubble up the log
messages to above handlers.
&lt;/li&gt;
&lt;li&gt;Monolog provides two different ways to add &lt;i&gt;extra information&lt;/i&gt;
    along the simple textual message:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;logging context&lt;/b&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$logger-&amp;gt;info('Adding a new user', array('username' =&amp;gt; 'Seldaek'));
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Preprocessors&lt;/b&gt;: useful for adding more details to your log. For
example, the &lt;code&gt;WebProcessor&lt;/code&gt; adds more details about the request,
like url, ip, etc:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$logger-&amp;gt;pushProcessor(new \Monolog\Processor\WebProcessor);
$browserHanlder = new \Monolog\Handler\BrowserConsoleHandler(\Monolog\Logger::INFO);
$logger-&amp;gt;pushHandler($browserHanlder);
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using channels to identify which part of the application a log is related:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; // Create the main logger of the app
$logger = new Logger('my_logger');
// clone the first one to only change the channel
$securityLogger = $logger-&amp;gt;withName('security');
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>php</category><guid>https://example.com/posts/notes/php-note/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item></channel></rss>