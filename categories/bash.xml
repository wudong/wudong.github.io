<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Warren Liu (Posts about bash)</title><link>https://example.com/</link><description></description><atom:link href="https://example.com/categories/bash.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2017 &lt;a href="mailto:n.tesla@example.com"&gt;Warren Liu&lt;/a&gt; </copyright><lastBuildDate>Fri, 14 Jul 2017 21:05:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Bash Note</title><link>https://example.com/posts/Bash-notes/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Bash array and its loop&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;declare an array
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="s2"&gt;"/etc/passwd"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/group"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/hosts"&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;limits&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="m"&gt;20&lt;/span&gt;, &lt;span class="m"&gt;26&lt;/span&gt;, &lt;span class="m"&gt;39&lt;/span&gt;, &lt;span class="m"&gt;48&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;array can also be created automatically when a variable is used in
the format like:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name&lt;span class="o"&gt;[&lt;/span&gt;index&lt;span class="o"&gt;]=&lt;/span&gt;value
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;loop through array values
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;arrayName&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
the syntax for array with [@] print out the whole array.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;get the length of an array with &lt;code&gt;${#array[@]}&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;declare&lt;/span&gt; -a &lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'Debian'&lt;/span&gt; &lt;span class="s1"&gt;'Red hat'&lt;/span&gt; &lt;span class="s1"&gt;'Suse'&lt;/span&gt; &lt;span class="s1"&gt;'Fedora'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;#Number of elements in the array&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;#Number of characters in the first element of the array.i.e Debian&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;get a subarray with &lt;code&gt;${array[@]:3:2}&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'Debian'&lt;/span&gt; &lt;span class="s1"&gt;'Ubuntu'&lt;/span&gt; &lt;span class="s1"&gt;'Fedora'&lt;/span&gt; &lt;span class="s1"&gt;'UTS'&lt;/span&gt; &lt;span class="s1"&gt;'OpenLinux'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;[@]:&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;add an element to an existing array:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'Debian'&lt;/span&gt; &lt;span class="s1"&gt;'Red hat'&lt;/span&gt;  &lt;span class="s1"&gt;'Fedora'&lt;/span&gt; &lt;span class="s1"&gt;'UTS'&lt;/span&gt; &lt;span class="s1"&gt;'OpenLinux'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"AIX"&lt;/span&gt; &lt;span class="s2"&gt;"HP-UX"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;contact two arrays:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'Debian'&lt;/span&gt; &lt;span class="s1"&gt;'Red hat'&lt;/span&gt; &lt;span class="s1"&gt;'Ubuntu'&lt;/span&gt;  &lt;span class="s1"&gt;'UTS'&lt;/span&gt; &lt;span class="s1"&gt;'OpenLinux'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;Shell&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'bash'&lt;/span&gt; &lt;span class="s1"&gt;'csh'&lt;/span&gt; &lt;span class="s1"&gt;'jsh'&lt;/span&gt; &lt;span class="s1"&gt;'rc'&lt;/span&gt; &lt;span class="s1"&gt;'tcsh'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;UnixShell&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Shell&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# alternatively, to append the second array to the first&lt;/span&gt;
&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;Shell
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;remove an element from an array using subarray and contact
&lt;/li&gt;
&lt;li&gt;unset can be used to delete an entire array
&lt;/li&gt;
&lt;li&gt;bash also support &lt;b&gt;associated arrays&lt;/b&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;declare&lt;/span&gt; -A ARRAY &lt;span class="c1"&gt;# declar an associate array.&lt;/span&gt;
ARRAY&lt;span class="o"&gt;[&lt;/span&gt;STRING&lt;span class="o"&gt;]=&lt;/span&gt;VALUE
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Using &lt;code&gt;trap&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;trap [COMMANDS] [SIGNALS]&lt;/b&gt;: this instructs the &lt;b&gt;trap&lt;/b&gt; command to
catch the listed &lt;i&gt;SIGNALS&lt;/i&gt;, which my be signal names with or without
the &lt;i&gt;SIG&lt;/i&gt; prefix, or signal numbers.
&lt;/li&gt;
&lt;li&gt;0, or &lt;i&gt;EXIT&lt;/i&gt;, the commands are executed when the shell exists.
&lt;/li&gt;
&lt;li&gt;&lt;i&gt;DEBUG&lt;/i&gt;, the list of commands is executed after every simple
command.
&lt;/li&gt;
&lt;li&gt;&lt;i&gt;ERR&lt;/i&gt;, the commands is executed each time a simple command exists
with a non-zero status.
&lt;/li&gt;
&lt;li&gt;Example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# traptest.sh&lt;/span&gt;

&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s2"&gt;"echo Booh!"&lt;/span&gt; SIGINT SIGTERM
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"pid is &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; :                 &lt;span class="c1"&gt;# This is the same as "while true".&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
	sleep &lt;span class="m"&gt;60&lt;/span&gt;        &lt;span class="c1"&gt;# This script is not really doing anything.&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;In this example, Ctrl+C, or kill with the PID without specifying
the &lt;i&gt;KILL&lt;/i&gt; signal, will not terminate the script, cause the
signals is trapped.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;trap&lt;/b&gt; can be used to clean up resource in shell script.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;SIGTERM vs. SIGKILL&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Sending signals to processes using &lt;code&gt;kill&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Anytime you use &lt;code&gt;kill&lt;/code&gt; on a process, you are actually sending the
process a signal.
&lt;/li&gt;
&lt;li&gt;The full list of signals can be found with &lt;code&gt;kill -l&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Without any parameters, &lt;code&gt;kill pid&lt;/code&gt; would send a &lt;i&gt;SIGTERM&lt;/i&gt; signal,
&lt;ul class="org-ul"&gt;
&lt;li&gt;in which case:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The process may stop immediately.
&lt;/li&gt;
&lt;li&gt;The process may stop after a short delay after cleaning up resources.
&lt;/li&gt;
&lt;li&gt;The process may keep running indefinitely.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The application can determine what it want to do once a &lt;i&gt;SIGTERM&lt;/i&gt; is
received.
&lt;/li&gt;
&lt;li&gt;Also, if the application is in a bad state, such as waiting for disk
I/O, it may not be able to act on the signal that was sent.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill -9 pid&lt;/code&gt;: will send a &lt;i&gt;SIGKILL&lt;/i&gt;, which cannot be ignored by the
process.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The process isn't made aware of the &lt;i&gt;SIGKILL&lt;/i&gt; signal since the
signal goes straight to &lt;code&gt;init&lt;/code&gt;, which will stop the process.
&lt;/li&gt;
&lt;li&gt;The process never gets the opportunity to catch the signal and act
on it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>bash</category><guid>https://example.com/posts/Bash-notes/</guid><pubDate>Fri, 14 Jul 2017 15:28:48 GMT</pubDate></item></channel></rss>