<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Warren Liu (Posts about soa)</title><link>https://wudong.graceliu.uk/</link><description></description><atom:link href="https://wudong.graceliu.uk/categories/soa.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2017 &lt;a href="mailto:wudong@graceliu.uk"&gt;Warren Liu&lt;/a&gt; </copyright><lastBuildDate>Mon, 17 Jul 2017 07:12:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>SOA Patterns</title><link>https://wudong.graceliu.uk/posts/reading/soa-patterns/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wudong.graceliu.uk/posts/reading/soa-patterns/#sec-1"&gt;Solving SOA pains with patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Solving SOA pains with patterns&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Defining software architecutre:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Software architecture is the collection of fundamental decisions
about a software product or solution designed to meet the
project's quality attributes (the architectural requirements).
&lt;/li&gt;
&lt;li&gt;The architecture includes the main components, their main
attributes, and their collaboration to meet the quality attributes.
&lt;/li&gt;
&lt;li&gt;Arehitecture can, and usually should, be expressed in several
levels of abstraction, where the number of levels depends on the
project's size and complexity.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some comments about software architecture:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Architecture represents the set of earliest design decisions that
are both hardest to change and most critical to get right.
&lt;/li&gt;
&lt;li&gt;Architecture is an attribute of every system.
&lt;/li&gt;
&lt;li&gt;Architecture breaks a system into components and sets boundaries.
&lt;/li&gt;
&lt;li&gt;Architecture is about relationships and component interactions.
&lt;/li&gt;
&lt;li&gt;Architecture explains the retionale behind the choices. Also it
can be benefical to understand what alternatives were weighed and
abandoned.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The unit of communicationin SOA is the &lt;code&gt;message&lt;/code&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;RPC often requires the caller to have intimate knowledge of the
other system's implementation details. With messaging, this isn't
the case.
&lt;/li&gt;
&lt;li&gt;Messages have both a header and a body (the payload).
&lt;/li&gt;
&lt;li&gt;Messages can come in may different forms:
&lt;ul class="org-ul"&gt;
&lt;li&gt;HTTP GET messages,
&lt;/li&gt;
&lt;li&gt;Simple Object Access Protocol (SOAP) messages,
&lt;/li&gt;
&lt;li&gt;Java Message Service (JMS) messages,
&lt;/li&gt;
&lt;li&gt;Simple Mail Transfer Protocol (SMTP) messages.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>patterns</category><category>soa</category><guid>https://wudong.graceliu.uk/posts/reading/soa-patterns/</guid><pubDate>Fri, 14 Jul 2017 23:00:00 GMT</pubDate></item></channel></rss>