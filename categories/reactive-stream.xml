<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Warren Liu (Posts about reactive stream)</title><link>https://example.com/</link><description></description><atom:link href="https://example.com/categories/reactive-stream.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017 &lt;a href="mailto:n.tesla@example.com"&gt;Warren Liu&lt;/a&gt; </copyright><lastBuildDate>Fri, 14 Jul 2017 20:53:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Reactive Streams</title><link>https://example.com/posts/reactive-stream/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Handling streams of data – especially "live" data whose volumn is
not predetermined – requires special care in an asynchronous system.
&lt;/li&gt;
&lt;li&gt;The most prominent issue is that &lt;b&gt;resource consumption&lt;/b&gt; needs to be
controlled such that a &lt;i&gt;fast data source does not overwhelm the steam
destination&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;The main goal is to govern the exchange of stream data across an
asynchronous boundary, while ensuring that the receiving side is not
forced to buffer arbitrary amounts of data.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Back pressure is an integral part of this modl in order to allow
the queue which mediate between threads to be &lt;b&gt;bounded&lt;/b&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In summary, Reactive Streams is a standard and specification for
Stream-oriented libraries for the JVM that:
&lt;ul class="org-ul"&gt;
&lt;li&gt;process a potentially &lt;b&gt;unbounded number&lt;/b&gt; of elements,
&lt;/li&gt;
&lt;li&gt;in sequence,
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;asynchronously&lt;/b&gt; passing elements between components,
&lt;/li&gt;
&lt;li&gt;with &lt;b&gt;mandatory&lt;/b&gt; &lt;i&gt;non-blocking backpressure&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Publisher: a provider of a potentially unbounded number of sequenced
elements, publishing them according to the *demand received from its
Subscriber(S).
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;RxJava 2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;a href="https://github.com/ReactiveX/RxJava"&gt;https://github.com/ReactiveX/RxJava&lt;/a&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;RxJava 2 implements Reactive-Streams API.
&lt;/li&gt;
&lt;li&gt;RxJava 2 features several base classes you can discover operators on:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;io.reactivex.Flowable&lt;/code&gt; : 0..N flows, supporting Reactive-Streams and backpressure
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io.reactivex.Observable&lt;/code&gt;: 0..N flows, no backpressure
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io.reactivex.Single&lt;/code&gt;: a flow of exactly 1 item or an error
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io.reactivex.Completable&lt;/code&gt;: a flow without items but only a completion or error signal
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io.reactivex.Maybe&lt;/code&gt;: a flow with no items, exactly one item or an
error.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>reactive stream</category><guid>https://example.com/posts/reactive-stream/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item></channel></rss>