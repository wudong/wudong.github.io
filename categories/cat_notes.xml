<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Warren Liu (Posts about Notes)</title><link>https://example.com/</link><description></description><atom:link href="https://example.com/categories/cat_notes.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2017 &lt;a href="mailto:n.tesla@example.com"&gt;Warren Liu&lt;/a&gt; </copyright><lastBuildDate>Fri, 14 Jul 2017 20:53:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>agile</title><link>https://example.com/posts/agile-notes/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Practices of an Agile Developer&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;In the beginning of the development, it will be good to have a hotfix
policy in place to make it easy to do hotfix.
&lt;/li&gt;
&lt;li&gt;Integration is one of the biggest risk in software development. It
will be best to integrate a few times a day.
&lt;/li&gt;
&lt;li&gt;To integrate as early and as often as possible to avoid problems of
integration later.
&lt;/li&gt;
&lt;li&gt;Automate deployment early as well. &lt;i&gt;Deploy hotfix in the production
environment should be made easy&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;Agility is all about &lt;b&gt;managing change&lt;/b&gt; and the code is one of things
that change the most.
&lt;/li&gt;
&lt;li&gt;Thinking of unit test results same as compiler result. If it doesn't
pass the test, or even, no test at all for a piece of code, it
should be treated equivalent to not compiling.
&lt;/li&gt;
&lt;li&gt;Unit test may not be appropriate for prototyping or
experimenting. In the rare cases that prototypes go into production,
unit test need to be added for them.
&lt;/li&gt;
&lt;li&gt;Estimate the time needed for a task, and when finish a task, keep
track of how long it really took.
&lt;/li&gt;
&lt;li&gt;Keep a solution log, maintain a log of problems faced and solutions
found. &lt;span class="underline"&gt;Even better than maintaining a log is sharing it with others&lt;/span&gt;.
&lt;/li&gt;
&lt;li&gt;Warnings are really errors.
&lt;ul class="org-ul"&gt;
&lt;li&gt;If your compiler allows you to fine-tune warning reporting levels,
turn that all the way up so warnings are not ignored.
&lt;/li&gt;
&lt;li&gt;You can usually instruct the compiler to specifically suppress
unavoidable warnings.
&lt;/li&gt;
&lt;li&gt;Deprecated methods have been deprecated for a reason.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Provide useful error messages to the user. Allow user to see error
&lt;b&gt;details&lt;/b&gt; with &lt;i&gt;additional click&lt;/i&gt; could be very useful for debug.
&lt;/li&gt;
&lt;li&gt;Information logged may contain not only the details about what went
wrong but also a snapshot of the state of the system (for example,
the session state in a web application)
&lt;/li&gt;
&lt;li&gt;Type of errors, by keeping track of what kind of error you are
reporting, you can provide more appropriate advice to your audience.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Program defects, bugs: NullPointerException, missing key values,
etc. The user, or system administrator can do nothing about it.
&lt;/li&gt;
&lt;li&gt;Environment problem: failure to connect to a database or remote
service, insufficient permissions, etc. The program can do nothing
about it.
&lt;/li&gt;
&lt;li&gt;User error.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Practice collective ownership
&lt;/li&gt;
&lt;li&gt;Architect must write code
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Restrospective&lt;/h2&gt;
&lt;/div&gt;</description><category>agile study</category><guid>https://example.com/posts/agile-notes/</guid><pubDate>Fri, 14 Jul 2017 15:28:48 GMT</pubDate></item><item><title>Angular 2 Notes</title><link>https://example.com/posts/angular-notes/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Modules (NgModule)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;An angular module is a class decorated with &lt;code&gt;@NgModule&lt;/code&gt; metadata:
&lt;ul class="org-ul"&gt;
&lt;li&gt;declare the &lt;b&gt;components&lt;/b&gt;, &lt;b&gt;directives&lt;/b&gt; and &lt;b&gt;pipes&lt;/b&gt; of the module
&lt;/li&gt;
&lt;li&gt;export some of those classes
&lt;/li&gt;
&lt;li&gt;import other &lt;b&gt;modules&lt;/b&gt; needed by &lt;i&gt;this&lt;/i&gt; module
&lt;/li&gt;
&lt;li&gt;provide services at the application level that any application
component can use
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every Angular app has at least one module class, the &lt;b&gt;root module&lt;/b&gt;,
which is bootstrapped to launch the application.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;BrowserModule&lt;/b&gt; need to be imported by every browser app. It
includes common directives like &lt;code&gt;NgIf&lt;/code&gt;, &lt;code&gt;NgFor&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;There are two ways to bootstrap a root module:
&lt;ul class="org-ul"&gt;
&lt;li&gt;static bootstrapping with Ahead-Of-time (AOT) compiler
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;platformBrowser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'@angular/platform-browser'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// The app module factory produced by the static offline compiler&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppModuleNgFactory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'./app.module.ngfactory'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Launch with the app module factory.&lt;/span&gt;
&lt;span class="nx"&gt;platformBrowser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;bootstrapModuleFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppModuleNgFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic bootstrapping with Just-in-time (JIT) compiler
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// The browser platform with a compiler&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;platformBrowserDynamic&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'@angular/platform-browser-dynamic'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// The app module&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'./app.module'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Compile and launch the module&lt;/span&gt;
&lt;span class="nx"&gt;platformBrowserDynamic&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;bootstrapModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppModule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Both way the bootstrap will end up with bootstrapping a
&lt;code&gt;ModuleFactory&lt;/code&gt; but the JIT will compile the ModuleFactory on the fly.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Service Providers&lt;/b&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A module can add providers to the application's &lt;b&gt;root&lt;/b&gt; injector:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
by adding this &lt;code&gt;providers&lt;/code&gt; property in the module metadata, it
provide it for all components in the module.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Angular module instances, unlike components, &lt;b&gt;do not&lt;/b&gt; have their
own injectors so they can't have their own provider scopes. This
means that anything &lt;code&gt;provided&lt;/code&gt; in a module are &lt;b&gt;application-scoped&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;As a general rule, import modules with providers &lt;b&gt;exactly once&lt;/b&gt;,
preferably in the &lt;code&gt;root module&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lazy loading modules with the Router
&lt;ul class="org-ul"&gt;
&lt;li&gt;TODO NEED TO READ MORE. TODO
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Testing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The &lt;b&gt;TestBed&lt;/b&gt; creates an Angular testing module - an &lt;code&gt;@NgModule&lt;/code&gt;
    class - that you configure with the &lt;b&gt;configureTestingModule&lt;/b&gt;
    method to produce the module environment for the class you want to test.
&lt;/li&gt;
&lt;li&gt;After configuring the &lt;b&gt;TestBed&lt;/b&gt;, use &lt;b&gt;TestBed.createComponent&lt;/b&gt; to
create an component instance and return a &lt;b&gt;ComponentFixture&lt;/b&gt;. The
fixture provides access to the component instance and to the
&lt;b&gt;DebugElement&lt;/b&gt; which is a handle on the compoment's DOM element.
&lt;/li&gt;
&lt;li&gt;Each test tells Angular when to perform change detection by
calling &lt;b&gt;fixture.detectChanges()&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;b&gt;async()&lt;/b&gt; function call to passing asynchronous execution body
to &lt;b&gt;beforeEach&lt;/b&gt;. Internally, &lt;b&gt;async()&lt;/b&gt; arranges for the body of
the &lt;b&gt;beforeEach&lt;/b&gt; to run in a special async test zone that hides
the mechanics of asynchronous execution.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;TestBed.compileComponents&lt;/b&gt; method asynchronously compiles all the
components configured in the testing module. When it completes,
the external templates and css files have been 'inlined' and
&lt;b&gt;Test.createComponent&lt;/b&gt; can create new instance of component
synchronously.
&lt;/li&gt;
&lt;li&gt;In general, tests should not make calls to remote services. They
should emulate such calls, for example, with &lt;b&gt;Jasmine&lt;/b&gt; spy:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;spy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'getQuote'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Testing async:
&lt;ul class="org-ul"&gt;
&lt;li&gt;using async()
&lt;/li&gt;
&lt;li&gt;using fakeAsync() and tick():
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'should show quote after getQuote promise (fakeAsync)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fakeAsync&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detectChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;tick&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                  &lt;span class="c1"&gt;// wait for async getQuote&lt;/span&gt;
  &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detectChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// update view with quote&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testQuote&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;using jasmine.done:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detectChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// get the spy promise and wait for it to resolve&lt;/span&gt;
  &lt;span class="nx"&gt;spy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mostRecent&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detectChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// update view with quote&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testQuote&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>angular javascript</category><guid>https://example.com/posts/angular-notes/</guid><pubDate>Fri, 14 Jul 2017 15:28:48 GMT</pubDate></item><item><title>Bash Note</title><link>https://example.com/posts/Bash-notes/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Bash array and its loop&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;declare an array
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="s2"&gt;"/etc/passwd"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/group"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/hosts"&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;limits&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="m"&gt;20&lt;/span&gt;, &lt;span class="m"&gt;26&lt;/span&gt;, &lt;span class="m"&gt;39&lt;/span&gt;, &lt;span class="m"&gt;48&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;array can also be created automatically when a variable is used in
the format like:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name&lt;span class="o"&gt;[&lt;/span&gt;index&lt;span class="o"&gt;]=&lt;/span&gt;value
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;loop through array values
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;arrayName&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
the syntax for array with [@] print out the whole array.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;get the length of an array with &lt;code&gt;${#array[@]}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;declare&lt;/span&gt; -a &lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'Debian'&lt;/span&gt; &lt;span class="s1"&gt;'Red hat'&lt;/span&gt; &lt;span class="s1"&gt;'Suse'&lt;/span&gt; &lt;span class="s1"&gt;'Fedora'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;#Number of elements in the array&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;#Number of characters in the first element of the array.i.e Debian&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;get a subarray with &lt;code&gt;${array[@]:3:2}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'Debian'&lt;/span&gt; &lt;span class="s1"&gt;'Ubuntu'&lt;/span&gt; &lt;span class="s1"&gt;'Fedora'&lt;/span&gt; &lt;span class="s1"&gt;'UTS'&lt;/span&gt; &lt;span class="s1"&gt;'OpenLinux'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;[@]:&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;add an element to an existing array:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'Debian'&lt;/span&gt; &lt;span class="s1"&gt;'Red hat'&lt;/span&gt;  &lt;span class="s1"&gt;'Fedora'&lt;/span&gt; &lt;span class="s1"&gt;'UTS'&lt;/span&gt; &lt;span class="s1"&gt;'OpenLinux'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"AIX"&lt;/span&gt; &lt;span class="s2"&gt;"HP-UX"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;contact two arrays:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'Debian'&lt;/span&gt; &lt;span class="s1"&gt;'Red hat'&lt;/span&gt; &lt;span class="s1"&gt;'Ubuntu'&lt;/span&gt;  &lt;span class="s1"&gt;'UTS'&lt;/span&gt; &lt;span class="s1"&gt;'OpenLinux'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;Shell&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;'bash'&lt;/span&gt; &lt;span class="s1"&gt;'csh'&lt;/span&gt; &lt;span class="s1"&gt;'jsh'&lt;/span&gt; &lt;span class="s1"&gt;'rc'&lt;/span&gt; &lt;span class="s1"&gt;'tcsh'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;UnixShell&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Shell&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# alternatively, to append the second array to the first&lt;/span&gt;
&lt;span class="nv"&gt;Unix&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;Shell
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;remove an element from an array using subarray and contact
&lt;/li&gt;
&lt;li&gt;unset can be used to delete an entire array
&lt;/li&gt;
&lt;li&gt;bash also support &lt;b&gt;associated arrays&lt;/b&gt;:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;declare&lt;/span&gt; -A ARRAY &lt;span class="c1"&gt;# declar an associate array.&lt;/span&gt;
ARRAY&lt;span class="o"&gt;[&lt;/span&gt;STRING&lt;span class="o"&gt;]=&lt;/span&gt;VALUE
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Using &lt;code&gt;trap&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;trap [COMMANDS] [SIGNALS]&lt;/b&gt;: this instructs the &lt;b&gt;trap&lt;/b&gt; command to
catch the listed &lt;i&gt;SIGNALS&lt;/i&gt;, which my be signal names with or without
the &lt;i&gt;SIG&lt;/i&gt; prefix, or signal numbers.
&lt;/li&gt;
&lt;li&gt;0, or &lt;i&gt;EXIT&lt;/i&gt;, the commands are executed when the shell exists.
&lt;/li&gt;
&lt;li&gt;&lt;i&gt;DEBUG&lt;/i&gt;, the list of commands is executed after every simple
command.
&lt;/li&gt;
&lt;li&gt;&lt;i&gt;ERR&lt;/i&gt;, the commands is executed each time a simple command exists
with a non-zero status.
&lt;/li&gt;
&lt;li&gt;Example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# traptest.sh&lt;/span&gt;

&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s2"&gt;"echo Booh!"&lt;/span&gt; SIGINT SIGTERM
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"pid is &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; :                 &lt;span class="c1"&gt;# This is the same as "while true".&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
	sleep &lt;span class="m"&gt;60&lt;/span&gt;        &lt;span class="c1"&gt;# This script is not really doing anything.&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;In this example, Ctrl+C, or kill with the PID without specifying
the &lt;i&gt;KILL&lt;/i&gt; signal, will not terminate the script, cause the
signals is trapped.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;trap&lt;/b&gt; can be used to clean up resource in shell script.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;SIGTERM vs. SIGKILL&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Sending signals to processes using &lt;code&gt;kill&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Anytime you use &lt;code&gt;kill&lt;/code&gt; on a process, you are actually sending the
process a signal.
&lt;/li&gt;
&lt;li&gt;The full list of signals can be found with &lt;code&gt;kill -l&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Without any parameters, &lt;code&gt;kill pid&lt;/code&gt; would send a &lt;i&gt;SIGTERM&lt;/i&gt; signal,
&lt;ul class="org-ul"&gt;
&lt;li&gt;in which case:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The process may stop immediately.
&lt;/li&gt;
&lt;li&gt;The process may stop after a short delay after cleaning up resources.
&lt;/li&gt;
&lt;li&gt;The process may keep running indefinitely.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The application can determine what it want to do once a &lt;i&gt;SIGTERM&lt;/i&gt; is
received.
&lt;/li&gt;
&lt;li&gt;Also, if the application is in a bad state, such as waiting for disk
I/O, it may not be able to act on the signal that was sent.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill -9 pid&lt;/code&gt;: will send a &lt;i&gt;SIGKILL&lt;/i&gt;, which cannot be ignored by the
process.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The process isn't made aware of the &lt;i&gt;SIGKILL&lt;/i&gt; signal since the
signal goes straight to &lt;code&gt;init&lt;/code&gt;, which will stop the process.
&lt;/li&gt;
&lt;li&gt;The process never gets the opportunity to catch the signal and act
on it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>bash</category><guid>https://example.com/posts/Bash-notes/</guid><pubDate>Fri, 14 Jul 2017 15:28:48 GMT</pubDate></item><item><title>Coding Questions</title><link>https://example.com/posts/coding-questions/</link><dc:creator>Warren Liu</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;String rotation: &lt;br&gt;
  Use &lt;b&gt;substring()&lt;/b&gt; only to determine if a string is a rotation
of the other.
&lt;/li&gt;

&lt;li&gt;Return k-th to last element (last k element) of a singlely linked list
&lt;/li&gt;

&lt;li&gt;Delete middle node in a singely linke list, given only access to
that node.
&lt;/li&gt;

&lt;li&gt;Partition a linked list around a value &lt;code&gt;x&lt;/code&gt;, so that the node that
has value smaller than &lt;code&gt;x&lt;/code&gt; comes before the those larger than &lt;code&gt;x&lt;/code&gt;.
&lt;/li&gt;

&lt;li&gt;
&lt;/li&gt;&lt;/ul&gt;</description><category>coding algorithm</category><guid>https://example.com/posts/coding-questions/</guid><pubDate>Fri, 14 Jul 2017 15:28:48 GMT</pubDate></item><item><title>Solr Note</title><link>https://example.com/posts/solr-notes/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Note on Solr Cloud&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;ZooKeepers used for SolrCloud&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The main principle for a ZooKeeper ensemble is maintaining a
majority of servers to serve request. This majority is also called a
&lt;b&gt;quorum&lt;/b&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;If you only have two ZooKeeper nodes and one goes down, 50% of
available servers is not a majority, so ZooKeeper will no longer
server request.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a ZooKeeper service to be active, there must be a &lt;b&gt;majority&lt;/b&gt; of
non-failing machines that can communicate with each other.
&lt;/li&gt;
&lt;li&gt;To create a deployment that can tolerate the failure of &lt;code&gt;F&lt;/code&gt;
  machines, you should count on deploying &lt;code&gt;2xF+1&lt;/code&gt; machines.
&lt;/li&gt;
&lt;li&gt;For this reason, ZooKeeper deployments are usually made up of an &lt;b&gt;odd&lt;/b&gt;
  number of machines.
&lt;/li&gt;
&lt;li&gt;Whereas with Solr you need to create entirely new directories to run
multiple instances, to run a new ZooKeeper instance will only
require a new configurationfile in
&lt;code&gt;&amp;lt;ZOOKEEPER_HOME&amp;gt;/conf/zoo?.cfg&lt;/code&gt;. Although they will require a
distinct &lt;code&gt;dataDir&lt;/code&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The configuration file is passed to &lt;code&gt;zkServer.sh&lt;/code&gt; for start the
instance.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The configuration files of SolrCloud are kept in ZooKeeper.
&lt;ul class="org-ul"&gt;
&lt;li&gt;They are uploaded when Solr start or collection created, or can
be explicitly uploaded.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To manage SolrCloud configuration files with ZooKeeper
&lt;ul class="org-ul"&gt;
&lt;li&gt;Keep in mind that the configuration need to pushed t back to
ZooKeeper when the changes.
&lt;/li&gt;
&lt;li&gt;And reload the collection.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;SolrCloud Concepts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;Core&lt;/b&gt; has multiple meaning:
&lt;ul class="org-ul"&gt;
&lt;li&gt;In stand-alone Solr instance, a core corresponds to a
logical/physical index.
&lt;/li&gt;
&lt;li&gt;In SolrCloud, a &lt;b&gt;collection&lt;/b&gt; defines a logical index, where a &lt;b&gt;core&lt;/b&gt;
corresponds to a physical index residing in a node, which is a
&lt;b&gt;portion&lt;/b&gt; of the logical index.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SolrCloud has a &lt;b&gt;leader&lt;/b&gt; in every shard but the leader is largely the
same as any other &lt;b&gt;replica&lt;/b&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The &lt;b&gt;leader&lt;/b&gt; is elected dynamically. Any replica, on any node in
the cluster, can be appointed as the leader.
&lt;/li&gt;
&lt;li&gt;Both indexing documents and serving queries.
&lt;/li&gt;
&lt;li&gt;The only additional responsibility of the leader is to
&lt;b&gt;distribute&lt;/b&gt; documents to be &lt;i&gt;indexed to all other replicas&lt;/i&gt; in the
shard, and to then &lt;b&gt;report&lt;/b&gt; that all replicas have confirmed
receiving a given document.
&lt;/li&gt;
&lt;li&gt;Any document sent into SolrCloud is &lt;i&gt;&lt;b&gt;re-routed&lt;/b&gt; to the leader&lt;/i&gt; of
the appropriate shard, who then performs this responsibility.
&lt;/li&gt;
&lt;li&gt;Once a document has been added to the &lt;i&gt;transaction logs&lt;/i&gt;, it is
available via a &lt;b&gt;RealTimeGet&lt;/b&gt;, but is &lt;i&gt;&lt;b&gt;not available&lt;/b&gt; via search
until a soft commit or hard commit with &lt;code&gt;openSearcher=true&lt;/code&gt;&lt;/i&gt; has
been executed.
&lt;/li&gt;
&lt;li&gt;When a new replica join/rejoins the cluster it will simply replays
the transaction log to bring itself up to date with other nodes in
the shard.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed searching is handled automatically by the nodes in the cloud.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Querying any node will cause that node to send the query out to
one node in all other shards, returning a response only when it
has aggregated the results from all shards.
&lt;/li&gt;
&lt;li&gt;Zookeeper and all replicas are aware of any non-responding nodes,
and won't direct queries to nodes that are considered dead.
&lt;/li&gt;
&lt;li&gt;Solrj will use a simple round robin load balancer, distributing
queries evently to all nodes in SolrCloud.
&lt;/li&gt;
&lt;li&gt;Solrj is Zookeeper aware and thus will never send a query to a
node that is known as down.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When ZooKeeper detects a leader has gone down
&lt;ul class="org-ul"&gt;
&lt;li&gt;It will initiate the leader election process to select a new
leader.
&lt;/li&gt;
&lt;li&gt;Transaction log ensures that all nodes in the shard are in sync,
and all updates are durable and never lost when a leader goes
down.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>solr</category><guid>https://example.com/posts/solr-notes/</guid><pubDate>Fri, 14 Jul 2017 15:28:48 GMT</pubDate></item><item><title>ZooKeeper Note</title><link>https://example.com/posts/zookeeper-notes/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Note on ZooKeeper&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Concepts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;ZooKeeper is a high-performance &lt;b&gt;coordination service&lt;/b&gt; for distributed
applications.
&lt;/li&gt;
&lt;li&gt;Allows distributed processes to coordinate with each other through a
&lt;i&gt;shared &lt;b&gt;hierarchal namespace&lt;/b&gt;&lt;/i&gt;, which is organized similarly to a
standard file system.
&lt;/li&gt;
&lt;li&gt;ZooKeeper's data is kept in-memory, which means ZooKeeper can
achieve high throughput and low latency numbers.
&lt;/li&gt;
&lt;li&gt;ZooKeeper itself is intended to be &lt;b&gt;replicated&lt;/b&gt; over a sets of hosts
called an &lt;b&gt;ensembl&lt;/b&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The servers that make up the ZooKeeper service must all know about
each other.
&lt;/li&gt;
&lt;li&gt;They maintain an &lt;i&gt;in-memory&lt;/i&gt; image of state, along with a
&lt;b&gt;transaction logs&lt;/b&gt; and &lt;b&gt;snapshots&lt;/b&gt; in a persistent store.
&lt;/li&gt;
&lt;li&gt;As long as a majority of the servers are available, the ZooKeeper
service will be available.
&lt;/li&gt;
&lt;li&gt;Clients connect to a &lt;b&gt;single&lt;/b&gt; ZooKeeper server. The client maintains
&lt;b&gt;a TCP connection&lt;/b&gt; through which it sends request, get responses,
gets &lt;b&gt;watch events&lt;/b&gt; and sends &lt;b&gt;heart beats&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;If the TCP connection to the server breaks, the client will
connect to a different server.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ZooKeeper is ordered in the sense that, ZooKeeper stamps each update
with a number that reflects the order of all ZooKeeper transactions.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Subsequent operations can use the order to implement higher-level
abstractions, such as &lt;b&gt;synchronization primitives&lt;/b&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ZooKeeper is fast in &lt;b&gt;read-dominant&lt;/b&gt; workloads, it performs best
where reads are more common than writes, at ratios of around 10:1.
&lt;/li&gt;
&lt;li&gt;ZooKeeper data nodes are called &lt;b&gt;znode&lt;/b&gt;. Unlike standard file
system, each node in a ZooKeeper namespace can have data associated
with it, &lt;b&gt;as well as&lt;/b&gt; children.
&lt;/li&gt;
&lt;li&gt;Znodes maintain a &lt;b&gt;stat&lt;/b&gt; structure that includes &lt;b&gt;version numbers&lt;/b&gt; for
data changes, ACL changes, and &lt;b&gt;timestamps&lt;/b&gt;. Whenever a client
retrieves data it also receives the version of the data.
&lt;/li&gt;
&lt;li&gt;The data stored at each znode in a namespace is read and written
atomically. Each node has an Access Control List (ACL) that
restricts who can do that.
&lt;/li&gt;
&lt;li&gt;ZooKeeper also has the notion of &lt;b&gt;ephemeral nodes&lt;/b&gt;. These znodes
exists as long as the session that created the znode is active. When
the session ends the znode is deleted.
&lt;/li&gt;
&lt;li&gt;Clients can &lt;b&gt;set a watch&lt;/b&gt; on a znodes. A watch will be triggered and
removed when the znode changes.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Simple API&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
One of the design goals of ZooKeeper is provide a very simple
programming interface:
&lt;/p&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt; create &lt;/dt&gt;&lt;dd&gt;create a node at a location in the tree
&lt;/dd&gt;
&lt;dt&gt; delete &lt;/dt&gt;&lt;dd&gt;deletes a node
&lt;/dd&gt;
&lt;dt&gt; exists &lt;/dt&gt;&lt;dd&gt;tests if a node exists at a location
&lt;/dd&gt;
&lt;dt&gt; get data &lt;/dt&gt;&lt;dd&gt;reads the data from a node
&lt;/dd&gt;
&lt;dt&gt; set data &lt;/dt&gt;&lt;dd&gt;writes data to a node
&lt;/dd&gt;
&lt;dt&gt; get children &lt;/dt&gt;&lt;dd&gt;retrieves a list of children of a node
&lt;/dd&gt;
&lt;dt&gt; sync &lt;/dt&gt;&lt;dd&gt;waits for data to be propagated.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Implementation&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://zookeeper.apache.org/doc/r3.3.3/images/zkcomponents.jpg" alt="zkcomponents.jpg"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The replicated database is an *in-memory( database containing the
entire data tree. Updates are logged to disk for recoverability, and
writes are serialized to disk &lt;b&gt;before&lt;/b&gt; thay are applied to the
in-memory database.
&lt;/li&gt;
&lt;li&gt;Client connect to exactly one server to submit request:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Read requests are serviced from the local replica.
&lt;/li&gt;
&lt;li&gt;Write requests are processed by an agreement protocol.
&lt;ul class="org-ul"&gt;
&lt;li&gt;All write requests are forwarded to a single server, called the
&lt;b&gt;leader&lt;/b&gt;. The rest of the ZooKeeper servers, called &lt;b&gt;followers&lt;/b&gt;,
receive message proposals from the leader and agree upon message delivery.
&lt;/li&gt;
&lt;li&gt;The messaging layer take care of replacing leaders on failures and
syncing followers with leaders.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Programmer's Guide&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
&lt;a href="https://zookeeper.apache.org/doc/r3.3.3/zookeeperProgrammers.html"&gt;https://zookeeper.apache.org/doc/r3.3.3/zookeeperProgrammers.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-1-5" class="outline-3"&gt;
&lt;h3 id="sec-1-5"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Java API&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-5"&gt;
&lt;p&gt;
&lt;a href="https://zookeeper.apache.org/doc/r3.3.3/api/index.html"&gt;https://zookeeper.apache.org/doc/r3.3.3/api/index.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>zookeeper</category><guid>https://example.com/posts/zookeeper-notes/</guid><pubDate>Fri, 14 Jul 2017 15:28:48 GMT</pubDate></item><item><title>Algorithms Note</title><link>https://example.com/posts/algorithms-notes/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;KdTree&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&lt;a href="http://pointclouds.org/documentation/tutorials/kdtree_search.php"&gt;http://pointclouds.org/documentation/tutorials/kdtree_search.php&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
A k-d tree, or k-dimensional tree, is a data structure used for
organizing some number of points in a space with k-dimensions. It is a
&lt;b&gt;binary tree&lt;/b&gt; with some other constraints. K-d trees are very useful
for &lt;b&gt;range and nearest neighbor searches&lt;/b&gt;.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Every node in the binary tree is a k-dimensional point.
&lt;/li&gt;
&lt;li&gt;Each level of a k-d tree splits all children along a specific dimension.
&lt;/li&gt;
&lt;li&gt;Every non-leaf node can be thought of implicily generating a
splitting hyperplane that divides the space into two parts.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Construction&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
The pesduo code to construct a &lt;code&gt;balanced&lt;/code&gt; k-d tree, in which each leaf
node is approximately the same distance from the root.
&lt;/p&gt;

&lt;p class="verse"&gt;
function kdtree (list pointList, int depth)&lt;br&gt;
{&lt;br&gt;
Â Â Â Â // Select axis based on depth so that axis cycles through all valid values&lt;br&gt;
Â Â Â Â int axis := depth mod k;&lt;br&gt;
&lt;br&gt;
Â Â Â Â // Sort point list and choose median as pivot element&lt;br&gt;
Â Â Â Â select median by axis from pointList;&lt;br&gt;
&lt;br&gt;
Â Â Â Â // Create node and construct subtrees&lt;br&gt;
Â Â Â Â var tree&lt;sub&gt;node&lt;/sub&gt; node;&lt;br&gt;
Â Â Â Â node.location := median;&lt;br&gt;
Â Â Â Â node.leftChild := kdtree(points in pointList before median, depth+1);&lt;br&gt;
Â Â Â Â node.rightChild := kdtree(points in pointList after median, depth+1);&lt;br&gt;
Â Â Â Â return node;&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
It is not required to select the median point for the
construction. When not, there is no gurantee the tree will be
balanced. To avoid a complex O(n) median-finding algorithms, on all n
points, a popular practice is to sort a &lt;code&gt;fixed number&lt;/code&gt; of randomly
selected points, and use the median of those point to server as the
splitting plane.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Adding elements&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Same way as adding element to another search tree. Traverse the tree
to find the correct node under which to insert the node.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Removing elements&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
The easiest way is to form the set of all nodes and leaves from the
children of the target node, and recreate that part of the tree.
&lt;/p&gt;

&lt;p&gt;
Another way is to find a replacement for the node removed. And then
recursively remove the replacement.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;Nearest neighbour search with k-d tree&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;With the search point, finding the node that will be the insertion
node if it is to insert the search point into the tree, and save
the node as &lt;code&gt;current best&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Unwinds the recursion of the tree, performing the following steps
at each node:
&lt;ol class="org-ol"&gt;
&lt;li&gt;If the current noe is closer than the &lt;code&gt;current best&lt;/code&gt;, it become
the &lt;code&gt;current best&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;The algorithm checks whether there could be any points on the
other side of the splitting plane that are closer to the search
point than the &lt;code&gt;current best&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Selection algorithm&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
A selection algorithm is to find the k-th smallest number in a
list. This includes the cases of finding minimum, maxmum and median
elements. There are O(n) selection algorithms and sublinear
performance for structured data.
&lt;/p&gt;

&lt;p&gt;
The best-known selection algorithm is &lt;b&gt;quickselect&lt;/b&gt;, related to
&lt;b&gt;quicksort&lt;/b&gt;. Like quicksort, &lt;span class="underline"&gt;it has optimal average performance, but
poor worst-case performance&lt;/span&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;Selection by sorting.&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;This method is inefficient for selecting a single element, but is
efficient when many selections need to be made.
&lt;/li&gt;
&lt;li&gt;Partial sorting only for the k.
&lt;/li&gt;
&lt;li&gt;Partial selection sort.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Partition based selection&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Quickselect is a variant of quicksort: in both one chooses a pivot
and then partitions the data by it, but while quicksort recurses on
both sides of the partition, &lt;span class="underline"&gt;quickselect only recurses on one side&lt;/span&gt;,
namely the side on which the desired kth element is.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Dynamic Programming&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Dynamic Programming is not an algorithm or data-structure. It is a
technique and it is applied to a certain class of problem.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Divide&lt;/b&gt; a problem into smaller sub-problems and if there are some
&lt;b&gt;overlapping&lt;/b&gt; sub-problems, then it is a dynamic programming problem.
&lt;/li&gt;
&lt;li&gt;The core idea of DP is to &lt;i&gt;avoid repeated work&lt;/i&gt; by remembering &lt;b&gt;partial&lt;/b&gt;
  results. It is basically &lt;b&gt;recursion along with memorisation&lt;/b&gt;.
&lt;ul class="org-ul"&gt;
&lt;li&gt;Recursion allows expressing the value of a function in terms of
other values of that function.
&lt;/li&gt;
&lt;li&gt;Memorisation tells that if the recursive calls were done in
advanced, and stored for access, it will make the program faster.
&lt;/li&gt;
&lt;li&gt;The intuition behind is to trade space for time.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DP is a powerful technique that allows one to solver different types
of problems in time \(O(n^2)\) or \(O(n^3)\) while a naive approach would
take exponential time.
&lt;/li&gt;
&lt;li&gt;An example for Fibonacci function.
&lt;ul class="org-ul"&gt;
&lt;li&gt;With pure recursive:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Bottom-up iterative approach:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fibresult&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;fibresult&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;fibresult&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fibresult&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fibresult&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;With DP, recursive approach with memorisation:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxn&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// base conditions&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// if memoized then return the value&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// recursive definition&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solve &lt;code&gt;Edit Distance&lt;/code&gt; using DP:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Edit Distance&lt;/code&gt; is a way of quantifying how dissimilar two strings
are, i.e. how many operations(add, delete, or replace a single
character) it would take to transform one string to the other.
&lt;/li&gt;
&lt;li&gt;Solving using DP, using a matrix to save the partial result:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;editDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// for all i, j, dp[i][j] will hold the edit distance between the first&lt;/span&gt;
    &lt;span class="c1"&gt;// i characters of source string and first j characters of target string&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// source can be transformed into target prefix by inserting&lt;/span&gt;
    &lt;span class="c1"&gt;// all of the characters in the prefix&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// source prefixes can be transformed into empty string by&lt;/span&gt;
    &lt;span class="c1"&gt;// by deleting all of the characters&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
		&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// no operation required as characters are the same&lt;/span&gt;
	    &lt;span class="p"&gt;}&lt;/span&gt;
	    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
		&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;    &lt;span class="c1"&gt;// substitution&lt;/span&gt;
			       &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;     &lt;span class="c1"&gt;// insertion&lt;/span&gt;
				    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;    &lt;span class="c1"&gt;// deletion&lt;/span&gt;
	    &lt;span class="p"&gt;}&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Backtracking&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Backtracking incrementally builds candidates to the solutions, and
abandon each partial candidate as soon as it cannot possibly be
completed to a valid solution.
&lt;/li&gt;
&lt;li&gt;Backtracking can be applied only for problems which admit the
concept of a &lt;b&gt;partial candidate solution&lt;/b&gt; and a relatively quick
test of whether it can possibly be completed to a valid solution.
&lt;/li&gt;
&lt;li&gt;When it applicable, it often much faster than brute force
enumeration of all complete candidates, since it eliminate a large
number of candidates with a single test.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4-1" class="outline-3"&gt;
&lt;h3 id="sec-4-1"&gt;Description of the method&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Conceptually, the partial candidates are represented as the &lt;b&gt;nodes&lt;/b&gt; of
a &lt;b&gt;tree&lt;/b&gt; structure, &lt;i&gt;the potential search tree&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;Each partial candidate is the parent of the candidates that &lt;i&gt;differ
from it by a &lt;b&gt;single extension step&lt;/b&gt;&lt;/i&gt;;
&lt;/li&gt;
&lt;li&gt;The &lt;b&gt;leaves&lt;/b&gt; of the tree are the partial candidates that cannot be
extended any further, i.e, a possible solution.
&lt;/li&gt;
&lt;li&gt;The backtracking algorithm traverses this search tree recursively,
from the root down, in &lt;b&gt;depth-first&lt;/b&gt; order.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4-2" class="outline-3"&gt;
&lt;h3 id="sec-4-2"&gt;The algorithm:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.cis.upenn.edu/~matuszek/cit594-2012/Pages/backtracking.html"&gt;The tutorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Recursive code:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_leaf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_goal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
The reasoning:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;If any of the children of n is solvable, n is solvable
&lt;/li&gt;
&lt;li&gt;If non of the children of n is solvable, n is non-solvable
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-Recursive code:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peek&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_leaf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_goal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;
	    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasMoreChildToTry&lt;/span&gt;&lt;span class="o"&gt;()){&lt;/span&gt;
	    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;childNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextChild&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	    &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;childNode&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
When the stack algorithm terminates successfully, the nodes on the
stack form (in reverse order) a path from the root to a goal node.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Binary Tree&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;Threaded Binary Tree&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A binary tree is threaded by :
&lt;ul class="org-ul"&gt;
&lt;li&gt;all right child pointers that would normally be &lt;b&gt;null&lt;/b&gt; point to
the &lt;b&gt;inorder&lt;/b&gt; successor of the node (if it exists).
&lt;/li&gt;
&lt;li&gt;all left child pointers that would normally be &lt;b&gt;null&lt;/b&gt; point to
the inorder &lt;b&gt;predecessor&lt;/b&gt; of the node.
&lt;/li&gt;
&lt;li&gt;Need to know if a pointer is a link or a thread, so a boolean is
needed for each pointer.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binary tree have a lot of wasted space. the null pointers can be
used to help &lt;b&gt;inorder&lt;/b&gt; traversals.
&lt;/li&gt;
&lt;li&gt;Threaded binary tree makes tree traversal faster since no stack or
recursion is needed.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;Tires&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-7-1" class="outline-3"&gt;
&lt;h3 id="sec-7-1"&gt;The Problem&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-7-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Determine if a word appears in a large dictionary. How to store the
large set of words in the dictionary effectively.
&lt;/li&gt;
&lt;li&gt;Google auto complete can also be implemented with a trie.
&lt;/li&gt;
&lt;li&gt;We can use &lt;b&gt;Trie&lt;/b&gt; and &lt;b&gt;Min Heap&lt;/b&gt; to get the &lt;code&gt;k&lt;/code&gt; most frequent words
efficiently.
&lt;ul class="org-ul"&gt;
&lt;li&gt;The idea is to use &lt;b&gt;Trie&lt;/b&gt; for searching existing words
adding new words efficiently.
&lt;/li&gt;
&lt;li&gt;Trie also stores count of occurrences of words.
&lt;/li&gt;
&lt;li&gt;A &lt;b&gt;Min Heap&lt;/b&gt; of size &lt;code&gt;k&lt;/code&gt; is used to keep track of &lt;code&gt;k&lt;/code&gt; most frequent
words at any point of time(Use of Min Heap is same as we used it
to find &lt;code&gt;k&lt;/code&gt; largest elements in this post).
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can be used for many other cases for example, to store a large set
of &lt;b&gt;Integer&lt;/b&gt;, &lt;b&gt;ByteArray&lt;/b&gt;, etc.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-7-2" class="outline-3"&gt;
&lt;h3 id="sec-7-2"&gt;What is a Trie&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-7-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The trie is a tree where each vertex represents a single word or a
prefix.
&lt;/li&gt;
&lt;li&gt;The root represents an empty string (ââ), the vertexes that are
direct sons of the root represent prefixes of length &lt;code&gt;1&lt;/code&gt;. A vertex
that are &lt;code&gt;k&lt;/code&gt; edges of distance of the root have an associated prefix
of length &lt;code&gt;k&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;w&lt;/code&gt; be two vertexes of the trie, and assume that &lt;code&gt;v&lt;/code&gt; is a
direct father of &lt;code&gt;w&lt;/code&gt;, then &lt;code&gt;v&lt;/code&gt; must have an associated prefix of &lt;code&gt;w&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-7-3" class="outline-3"&gt;
&lt;h3 id="sec-7-3"&gt;Complexity&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-7-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Insert/Finding of a word in tire can be done in &lt;code&gt;O(L)&lt;/code&gt; time, where L
is the length of the word.
&lt;/li&gt;
&lt;li&gt;The memory used in the tries depends on the methods to store the
edges and how many words have prefixes in common.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-7-4" class="outline-3"&gt;
&lt;h3 id="sec-7-4"&gt;Example&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-7-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The next figure shows a trie with the words âtreeâ, âtrieâ, âalgoâ,
âassocâ, âallâ, and âalso.â
&lt;img src="http://community.topcoder.com/i/education/alg_tries.png" alt="alg_tries.png"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;SkipList&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;SkipList is a data structure that allows fast search within an ordered
sequence of elements.
&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/86/Skip_list.svg/400px-Skip_list.svg.png" alt="400px-Skip_list.svg.png"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;By maintaining a linked hierarchy of subsequences, with each
successive subsequences skipping over fewer elements than the
previous one.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Search/Insert/Delete average on &lt;code&gt;O(log n)&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;A skip list is built in layers:
&lt;ul class="org-ul"&gt;
&lt;li&gt;The bottom layer is an ordinary ordered linked list.
&lt;/li&gt;
&lt;li&gt;Each higher layer acts as an "express lane" for the lists below,
where an element in layer &lt;code&gt;i&lt;/code&gt; appears in layer &lt;code&gt;i+1&lt;/code&gt; with some fixed
probability &lt;code&gt;p&lt;/code&gt; (two commonly used values for p are 1/2 or 1/4).
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A search for a target element begins at the head element in the top
list, and proceeds horizontally until the current element is greater
than or equal to the target.
&lt;ul class="org-ul"&gt;
&lt;li&gt;if equal, it is found.
&lt;/li&gt;
&lt;li&gt;if greater, or search reaches the end of the linked list, the
procedure is repeated after returning to the previous element and
dropping down vertically to the next lower list.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>algorithm</category><guid>https://example.com/posts/algorithms-notes/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item><item><title>Emacs Note</title><link>https://example.com/posts/emacs-note/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Emacs Notes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;expend-region&lt;/code&gt;: require the module to be able to expand/shrink selections.
&lt;ul class="org-ul"&gt;
&lt;li&gt;expend: C-=
&lt;/li&gt;
&lt;li&gt;shrink: Mâ C-= &lt;i&gt;Note&lt;/i&gt;: Mâ is a negative prefix argument normally means -1.
this allow the &lt;code&gt;er/expand-region&lt;/code&gt; function to do a shrink.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;repeat previous command: C-x z
&lt;/li&gt;

&lt;li&gt;open ssh remote file:
&lt;p class="verse"&gt;
C-x C-f /ssh:user@192.168.1.5:/usr/share/nginx/html/index.html&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
Note the leading slash before ssh.
It support server defined in .ssh/config.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;This can also be used to Open file with sudo:
&lt;p class="verse"&gt;
C-x C-f /sudo::/etc/fstab&lt;br&gt;
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;Fill paragraph: with ~fill-paragraph~(M-q) to organize paragraph
with desired right margin.
&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;indent multiple line: &lt;br&gt;
  Select multiply lines, then type &lt;code&gt;C-u 8 C-x Tab&lt;/code&gt;, it will indent the
region by 8 spaces.  &lt;code&gt;C-u -4&lt;/code&gt; C-x Tab will &lt;i&gt;un-indent&lt;/i&gt; by 4 spaces
&lt;/li&gt;

&lt;li&gt;To input unicode characters:
&lt;p class="verse"&gt;
C-x 8 RET unicode&lt;br&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><guid>https://example.com/posts/emacs-note/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item><item><title>Git Note</title><link>https://example.com/posts/git-note/</link><dc:creator>Warren Liu</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;remove a file from the index
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm --cached &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><category>git</category><guid>https://example.com/posts/git-note/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item><item><title>Java 8 Topics</title><link>https://example.com/posts/java-8-topics/</link><dc:creator>Warren Liu</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;NIO File API&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;java.nio.file.Path&lt;/code&gt; is part of the more modern &lt;code&gt;java.nio.file&lt;/code&gt; lib
and does everything &lt;code&gt;java.io.File&lt;/code&gt; can, but generally in a better way.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.toFile()&lt;/code&gt; to convert to &lt;code&gt;File&lt;/code&gt; for legacy.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file.ToPath()&lt;/code&gt; to convert to &lt;code&gt;Path&lt;/code&gt; instance.
&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;Files&lt;/code&gt; utility class, which deals with &lt;code&gt;Path&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toPath&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Problems with &lt;code&gt;java.io.File&lt;/code&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Many methods didn't throw exceptions when they failed, so it was
impossible to obtain a useful error message.
&lt;/li&gt;
&lt;li&gt;No real support for symbolic links.
&lt;/li&gt;
&lt;li&gt;More support for metadata was desired.
&lt;/li&gt;
&lt;li&gt;Many of the &lt;code&gt;File&lt;/code&gt; method didn't scale. Requesting a large
directory listing over a server would result in a hang.
&lt;/li&gt;
&lt;li&gt;No possible to write reliable code that could recursively walk a
file tree when there were circular symbolic link.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating a Path
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Paths.get(String... filePath)&lt;/code&gt;, which is a shorthand for:
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileSystems.getDefault().getPath(String filePath)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user.home"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"logs"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"foo.log"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Files&lt;/code&gt; consists exclusively of static methods that operate on
files, directories or other types of files. In most cases, these
methods will delegate to the associated &lt;code&gt;file system provider&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;copy:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;copy(InputStream in, Path target, CopyOption...options)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy(Path source, OutputStream out)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy(Path source, Path target target, CopyOption... options)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;create:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;createDirectoreis(Path dir, FileAttribute... attrs)&lt;/code&gt; : will
create nonexistent parent directories first.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createDirectory(Path dir, FileAttribute... attrs)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createFile(Path path)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-0-1" class="outline-4"&gt;
&lt;h4 id="sec-1-0-1"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; more on the File API.&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Using Method References&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Java compiler will take either a lambda expression, or a reference
to a method, where an implementation of a &lt;b&gt;function interface&lt;/b&gt; is
expected.
&lt;/li&gt;
&lt;li&gt;Method reference is used to &lt;b&gt;replace a single-method lambda
expression&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;Method reference for static methods and methods take parameters:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;staticMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;staticMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//equals to&lt;/span&gt;
&lt;span class="nl"&gt;Class:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;staticMethod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Any arguments, if any, taken by the method are passed automatically.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Numbers&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isMoreThanFifty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
	   &lt;span class="n"&gt;BiPredicate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Using a lambda expression&lt;/span&gt;
&lt;span class="n"&gt;findNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isMoreThanFifty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Using a method reference&lt;/span&gt;
&lt;span class="n"&gt;findNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Numbers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;isMoreThanFifty&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance method reference of an object of a particular type
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instanceMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//equals to&lt;/span&gt;
&lt;span class="nl"&gt;ObjectType:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;instanceMethod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;For example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;TriFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;doSum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//using lambda&lt;/span&gt;
&lt;span class="n"&gt;TriFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doSum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Using method reference&lt;/span&gt;
&lt;span class="n"&gt;TriFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;doSum&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance method reference of an existing object.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instanceMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//equals to&lt;/span&gt;
&lt;span class="nl"&gt;obj:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;instanceMethod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Constructor method reference
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ClassName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//equals to&lt;/span&gt;
&lt;span class="nl"&gt;ClassName:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Collection and Stream&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;With &lt;code&gt;forEach&lt;/code&gt;, once the method starts, we can't break out of the
iteration.
&lt;/li&gt;
&lt;li&gt;Pick one element with &lt;code&gt;findFirst/findAny&lt;/code&gt; which return an &lt;code&gt;Optional&lt;/code&gt;.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Optinal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foundName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findFirst&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;foundName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ifPresnet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h3 id="sec-3-1"&gt;Some of the JDK libraries that return a Stream&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Stream.concat()&lt;/code&gt; lazily concatenated streams
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream.generate(Supplier&amp;lt;T&amp;gt; s)&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Get a &lt;code&gt;Stream&lt;/code&gt; from &lt;code&gt;Iterator&lt;/code&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;iteratorToStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream.iterate(T seed, UnaryOperator&amp;lt;T&amp;gt; f)&lt;/code&gt;: return a Stream
consisting of &lt;code&gt;seed&lt;/code&gt;, &lt;code&gt;f(seed)&lt;/code&gt;, &lt;code&gt;f(f(seed))&lt;/code&gt;, etc.
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;&lt;li&gt;&lt;code&gt;chars()&lt;/code&gt; method from the &lt;code&gt;CharSequence&lt;/code&gt; interface, returns a
Stream&amp;lt;Int&amp;gt; over which we can iterate.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;chars&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream&amp;lt;Path&amp;gt; Files.list(Path path)&lt;/code&gt; method list all filenames in a
directory, or &lt;code&gt;listFiles()&lt;/code&gt; to get all the files instead of just
their names.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
     &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;isDirectory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream&amp;lt;String&amp;gt; Files.lines(Path path)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stream&amp;lt;Path&amp;gt; Files.find(Path start, int maxDepth, BiPredicate&amp;lt;Path,
  BasicFileAttributes&amp;gt; matchers, FileVisitOption... options)&lt;/code&gt; :
Returns a Stream that is lazily populated with Path by searching for
files in a file tree rooted at a given starting file.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h3 id="sec-3-2"&gt;Reducing a Collection to a single value.&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Similar method on &lt;code&gt;Stream&lt;/code&gt; are : &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;,  &lt;code&gt;average&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;mapToInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optional&amp;lt;T&amp;gt; reduce(BinaryOperator&amp;lt;T&amp;gt; accumulator)&lt;/code&gt; : reduction
using an associated accumulation function. This is equivalent to:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;foundAny&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;foundAny&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
	&lt;span class="n"&gt;foundAny&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foundAny&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;emtpy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;But it is &lt;i&gt;&lt;b&gt;not&lt;/b&gt; constrained to execute sequentially&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;empty stream results in Optional.empty()
&lt;/li&gt;
&lt;li&gt;Single element stream result in the element returned, without
apply the accumulator.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T reduce(T identity, BinaryOperator&amp;lt;T&amp;gt; accumulator)&lt;/code&gt; : is
equivalent to:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator
function, this means that for all &lt;code&gt;t&lt;/code&gt;,
&lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; is equal to &lt;code&gt;t&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;accumulator&lt;/code&gt; function must be an associative function:
&lt;ul class="org-ul"&gt;
&lt;li&gt;which means:
&lt;p class="verse"&gt;
(a op b) op c == a op (b op c)&lt;br&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Associative function is important for parallel evaluation:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U reduce(U identity, BiFunction&amp;lt;U, T, U&amp;gt; accumulator,
  BinaryOperator&amp;lt;U&amp;gt; combiner)&lt;/code&gt;: The most general form of reduce.
&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;StringJoiner&lt;/code&gt; class or the convenience method
&lt;code&gt;String.join()&lt;/code&gt; to join collection into a string.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collect()&lt;/code&gt; method does the reduction but delegate the actual
implementation or target to collector.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;friends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;joining&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3" class="outline-3"&gt;
&lt;h3 id="sec-3-3"&gt;Collectors&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Stream.collect()&lt;/code&gt; method takes a &lt;code&gt;Collector&lt;/code&gt;, or three functions
with a signature like:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;collect(Supplier&amp;lt;R&amp;gt; supllier, BiConsumer&amp;lt;R,T&amp;gt; accumulator,
    BiConsumer&amp;lt;R, R&amp;gt; combiner)&lt;/code&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;make the result container,
&lt;/li&gt;
&lt;li&gt;add a single elements to a result container,
&lt;/li&gt;
&lt;li&gt;merge one result container into another.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;olderThan20&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;addAll&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Collector&amp;lt;T, A, R&amp;gt;&lt;/code&gt; interface wraps the three parameters list above,
with an optional additional finisher for final transform on the
container.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; The type of stream elements.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; The mutable accumulation type of the reduction operation.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; The result type of the reduction operation.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Collector&lt;/code&gt; could have a list of &lt;code&gt;Characteristics&lt;/code&gt; for inspect:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;CONCURRENt&lt;/code&gt; : indicate the result container can support the
accumulator function being called concurrently with same result container.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IDENTITY_FINISH&lt;/code&gt; : finisher function is the &lt;i&gt;identity function&lt;/i&gt;
    and can be ignored.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNORDERED&lt;/code&gt; : the collection operation doesn't commit to
preserving the encounter order of input elements.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Collectors&lt;/code&gt; provides many useful &lt;code&gt;Collector&lt;/code&gt; for reduction
operations.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarizingDouble(ToDoubleFunction mapper)&lt;/code&gt; : Return summary
statistics for the resulting double values from the mapper.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DoubleSummaryStatistics&lt;/code&gt; have method to get &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;,
&lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt; for the collection.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;averagingDouble(ToDobuleFunction mapper)&lt;/code&gt; : produce the arithmetic
mean of a double-valued function applied to the input elements.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;averagingInt&lt;/code&gt;, &lt;code&gt;averagingLong&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counting()&lt;/code&gt; : counts the number of input elements.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;groupingBy(Function&amp;lt;T, K&amp;gt; classifier)&lt;/code&gt;: grouping elements according
to a classification function. and return a Map.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;groupingByConcurrent()&lt;/code&gt; returns a concurrent Collector.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapping(Function&amp;lt;T, U&amp;gt; mapper, Collector downstream)&lt;/code&gt; : applying
the mapping to each input element before accumulation. It adapts a
Collector accepting elements of type &lt;code&gt;U&lt;/code&gt; to one accepting &lt;code&gt;T&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;partioningBy(Predicate&amp;lt;T&amp;gt; predicate)&lt;/code&gt; : collector that return a
&lt;code&gt;Map&amp;lt;Boolean, List&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reducing(BinaryOperator&amp;lt;T&amp;gt; op)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toMap&lt;/code&gt;, &lt;code&gt;toConcurrentMap(Function&amp;lt;&amp;gt; keyMapper, Function&amp;lt;&amp;gt;
  valueMapper)&lt;/code&gt; : return a &lt;code&gt;ConcurrentMap&lt;/code&gt;, whose keys and values are
mapped from each elements.
&lt;/li&gt;
&lt;li&gt;If the mapped keys contains duplicates, &lt;code&gt;IllegalStateException&lt;/code&gt;
  is thrown.
&lt;ul class="org-ul"&gt;
&lt;li&gt;It is common for either the key or the value to be the input
elements. In this case, the utility method &lt;code&gt;Function.identity()&lt;/code&gt;
may be helpful:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;studentToGPA&lt;/span&gt;
&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Functions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
			       &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;computeGPA&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toMap(Function keyMapper, Function valueMapper, BinaryOperator
  mergeFunction)&lt;/code&gt;: takes an additional merge function, when the maps
key contains duplicates, the corresponding values is merged by it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Multiple and Fluent Comparisons&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;List.sort()&lt;/code&gt; mutate the list, to preserve the original list using
the Stream's &lt;code&gt;sorted()&lt;/code&gt; method:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ascendingAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ageDifference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// or we could do with method references.&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ageDifference&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;If all we want is a reverse of the comparison, the &lt;code&gt;Comparator&lt;/code&gt;
  method has a &lt;code&gt;reversed()&lt;/code&gt; default method:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compareAscending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ageDifference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compareDescending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compareAscending&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reversed&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min/max&lt;/code&gt; method could also take a comparator:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ageDifference&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;ifPresent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;youngest&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Youngest: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;youngest&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static Comparator&amp;lt;T&amp;gt; comparing(Function&amp;lt;T, U&amp;gt; keyExtractor&amp;gt;)&lt;/code&gt;:
allowing comparing by some key:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;byName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;With multiple comparators,  using &lt;code&gt;thenComparing()&lt;/code&gt;:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;byAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;byName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;comparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byAge&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;thenComparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byName&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4-1" class="outline-3"&gt;
&lt;h3 id="sec-4-1"&gt;Decorator pattern with Lambda&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Using the &lt;code&gt;Function.andThen()&lt;/code&gt; to combine or chain two &lt;code&gt;Function&lt;/code&gt;
  together.
&lt;/li&gt;
&lt;li&gt;Once we compose them, a call to &lt;code&gt;apply()&lt;/code&gt; will hop through the
chained ~Function~s:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;andThen&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//same as&lt;/span&gt;
&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;An example for decorator pattern:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setFilters&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;...&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
	&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;)-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compose&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
	&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Automatic Resource Management (ARM)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Rather than using both the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; blocks, a special
form of the &lt;code&gt;try&lt;/code&gt; block with a resource attached to it.
&lt;/li&gt;
&lt;li&gt;The java compiler will automatically inserting the finally block and
then call the &lt;code&gt;close()&lt;/code&gt; method:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FilrWriterARM&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;AutoCloseable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"close called automatically..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;FileWriterARM&lt;/span&gt; &lt;span class="n"&gt;writerARM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileWriterARM&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"somefile"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;}{&lt;/span&gt;
    &lt;span class="n"&gt;writerARM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"somsthing"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Done with the resources..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;We can see the &lt;code&gt;close()&lt;/code&gt; method was called as soon as we left the try
block.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Could also use lambda expressions and the &lt;b&gt;execute around method&lt;/b&gt;
  pattern to manage resources:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;use&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
		       &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;UseInstance&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FileWriterARM&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;FileWriterARM&lt;/span&gt; &lt;span class="n"&gt;writerARM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileWriterARM&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writerARM&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;writerARM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;Dealing with Exceptions in Lambda&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The &lt;code&gt;apply()&lt;/code&gt; method of the &lt;code&gt;Function&lt;/code&gt; interface does not specify
any checked exceptions.
&lt;/li&gt;
&lt;li&gt;So the lambda expression is not permitted to throw any checked exceptions.
&lt;/li&gt;
&lt;li&gt;Two options:
&lt;ul class="org-ul"&gt;
&lt;li&gt;handle the exception within the lambda expression, or
&lt;/li&gt;
&lt;li&gt;catch and rethrow it as an unchecked exception.
&lt;ul class="org-ul"&gt;
&lt;li&gt;In a concurrent execution, an exception raised within the lambda
expression will be propagated automatically to the calling
primary thread.
&lt;/li&gt;
&lt;li&gt;This will not terminate or obstruct the execution of other
lambda expressions running concurrently.
&lt;/li&gt;
&lt;li&gt;If exceptions are thrown from multiple concurrent executions,
only &lt;i&gt;one of them will be reported in the catch block&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the details of all exceptions are important, it is better to
capture those within the lambda expressions and pass them back to
the main thread as part of the result.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When we design our own higher-order functions based on our specific
need, we can more flexibly design the companion functional
interfaces to go with it.
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;UseInstance&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;Lambda with Laziness&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-7-1" class="outline-3"&gt;
&lt;h3 id="sec-7-1"&gt;Delayed Initialization&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-7-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Holder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Heavy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heavy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;createAndCacheHeavy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Holder&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
	&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;outpr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Heavy Holder is created"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Heavy&lt;/span&gt; &lt;span class="nf"&gt;getHeavy&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
	&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;heavy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="nf"&gt;createAndCacheHeavy&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
	&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeavyFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Heavy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Heavy&lt;/span&gt; &lt;span class="n"&gt;heavyInstance&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Heavy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Heavy&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;heavyInstance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	    &lt;span class="o"&gt;}&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;

	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;HeavyFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heavy&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	    &lt;span class="n"&gt;heavy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HeavyFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;

	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;heavy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The above use an indirect &lt;code&gt;Supplier&lt;/code&gt; to avoid synchronization on all
the &lt;code&gt;get()&lt;/code&gt; which normally required when using a plain &lt;code&gt;null&lt;/code&gt; check
and lazy initialization pattern.
&lt;/li&gt;
&lt;li&gt;Only the first call to &lt;code&gt;heavy.get()&lt;/code&gt; is synchronized, the later ones
are not because the &lt;code&gt;heavy&lt;/code&gt; instance has been changed by the first
call.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-7-2" class="outline-3"&gt;
&lt;h3 id="sec-7-2"&gt;Creating Infinite, Lazy Collections&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-7-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Using Stream's &lt;code&gt;static iterate(seed, UnaryOperator)&lt;/code&gt; method.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;Default methods&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
&lt;i&gt;- https://blog.codefx.org/java/everything-about-default-methods/&lt;/i&gt;
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Syntax: just like a regular method but modified with &lt;code&gt;default&lt;/code&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;thenComparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Explicit call to Default Methods:
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StringComparator&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;thenComparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"call to super"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thenComparing&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The interface name is used to specify the following &lt;code&gt;super&lt;/code&gt; which
would otherwise refer to the superclass (in this case Object).
&lt;/li&gt;
&lt;li&gt;It is not possbile to call a method from an interface that is not
mentioned in the &lt;code&gt;implements&lt;/code&gt; clause.
&lt;/li&gt;
&lt;li&gt;When implementing two interfaces where &lt;i&gt;one extends the other&lt;/i&gt;
    &lt;b&gt;Comparator.super&lt;/b&gt; causes a different compile error.
&lt;/li&gt;
&lt;li&gt;Together this means that it is &lt;i&gt;not possible to explicitly call
&lt;b&gt;overridden&lt;/b&gt; or &lt;b&gt;reabstracted&lt;/b&gt; default methods&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resolution Strategy:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Classes win over interfaces.
&lt;/li&gt;
&lt;li&gt;More specific interfaces win over less specific ones. A default
from &lt;code&gt;List&lt;/code&gt; wins over a default from &lt;code&gt;Collection&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;If there is not a unique winner according to the above rules,
concrete classes must disambiguate manually.
&lt;/li&gt;
&lt;li&gt;Re-Abstracing methods:
&lt;ul class="org-ul"&gt;
&lt;li&gt;If an abstract class or interface declares a method as
&lt;i&gt;abstract&lt;/i&gt; for which a &lt;i&gt;default implementation exists&lt;/i&gt; in some
superinterface, the default implementation of is overridden.
&lt;/li&gt;
&lt;li&gt;Hence all concrete classes which subtype it must implement the
method.
&lt;/li&gt;
&lt;li&gt;This technique is used throughout the JDK, e.g. on ConcurrentMap
(link) which re-abstracts a number of methods for which Map
(link) provides default implementations because these are not
thread-safe.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It is not possible for an interface to provide default
implementations for the methods in Object.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Default methods can only be &lt;code&gt;public&lt;/code&gt;, and cannot be &lt;code&gt;final&lt;/code&gt; or
&lt;code&gt;synchronized&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-8-1" class="outline-3"&gt;
&lt;h3 id="sec-8-1"&gt;Interface Evolution&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-8-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The purpose of default method is to enable interfaces to be evolved
in a compatible manner after their initial publication.
&lt;ul class="org-ul"&gt;
&lt;li&gt;It was impossible to add methods to interfaces without breaking
all implementations before default method.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ousting Utility classes. All those static methods which take an
instance of the interfaces as an argument can now be transformed
into a default method on the interface.
&lt;ul class="org-ul"&gt;
&lt;li&gt;While removing all interface-related utility classes in a code
base is possible,
&lt;/li&gt;
&lt;li&gt;It &lt;b&gt;might not be advisable&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;The usability and cohesiveness of the interface should remain the
main priority.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-8-2" class="outline-3"&gt;
&lt;h3 id="sec-8-2"&gt;Inheritance and Class-Building&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-8-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;With inheritance a type can assume three types of characteristics of
another type:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Type
&lt;/li&gt;
&lt;li&gt;Behaviour
&lt;/li&gt;
&lt;li&gt;State
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Class subtyping inherit all three of those characteristics.
&lt;/li&gt;
&lt;li&gt;Interface with default methods subtyping inherit only Type and
Behaviour.
&lt;/li&gt;
&lt;li&gt;Default method vs Mixin and Traits
&lt;ul class="org-ul"&gt;
&lt;li&gt;Mixin allow to inherit their type, behaviour &lt;b&gt;and state&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;As interfaces with defaults allow no inheritance of state, they
are clearly not mixins.
&lt;/li&gt;
&lt;li&gt;Traits do not define their own state, very similar to interfaces
with default methods
&lt;/li&gt;
&lt;li&gt;But the concepts are still different, and those differences are
not entirely trivial.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Default methods vs Abstract classes
&lt;ul class="org-ul"&gt;
&lt;li&gt;Language Differences
&lt;ul class="org-ul"&gt;
&lt;li&gt;Interfaces allow multiple inheritance
&lt;/li&gt;
&lt;li&gt;Default methos are never final, cannot be synchronized and
cannot override &lt;code&gt;Object&lt;/code&gt;'s method and always public.
&lt;/li&gt;
&lt;li&gt;Cannot define fields, so every state change has to be done via
the public API.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conceptual Differences
&lt;ul class="org-ul"&gt;
&lt;li&gt;Classes define &lt;i&gt;what something is&lt;/i&gt;, while interfaces usually
define &lt;i&gt;what something can do&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;Abstract classes are valid for skeletal (i.e. partial)
implementations of interfaces but &lt;i&gt;should not exist without a
matching interface&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>java</category><guid>https://example.com/posts/java-8-topics/</guid><pubDate>Thu, 13 Jul 2017 23:00:00 GMT</pubDate></item></channel></rss>