#+BEGIN_COMMENT
.. title: Microservices Note
.. slug: microservices-note
.. date: 2017-07-14
.. tags: microservice
.. category: Notes
.. link:
.. description:
.. type: text
#+END_COMMENT



* Challenges
- Monitoring multiple hosts
  - Health Checks: List of health checks is executed on/health
    endpoint call:
    - Health check responsible for DB connection
    - health check for other external resources
- Configuration of services
  - Use a configuration service: ~GET /configuration?serviceName=payment~
  - For example: Spring Cloud has a configuration service.
- Log aggregation
  - Microservices require centralized logging, as there is no one
    place to figure out what is going on
  - Logstash: data procession pipeline.
  - Need some type of *global request tracing*, assigning a request ID
    to each request such that you can figure out how things flow.
- Service discovery

* Asynchronous vs Thread-per-Request Processing
- IO Intensive:
- CPU Intensive:


* Blue Green Deployment
- [[https://martinfowler.com/bliki/BlueGreenDeployment.html]]
- One of the challenges with automating deployment is the cut-over
  itself, taking software from the final stage of testing to live
  production.
- Need to do this quickly in order to minimize downtime.
- The blue-green deployment approach does this by ensuring you have
  two production environment, as identical as possible.
[[  https://martinfowler.com/bliki/images/blueGreenDeployment/blue_green_deployments.png]]
- At any time one of them is live, and it is switched when doing deployment.
- Blue-green deployment also gives you a rapid way to rollback.
- There is still issue of dealing with missed *transactions* during
  the switch.
  - keep one as backup when the other is alive, feeding transaction to
    both.
  - Or put the application in read-only mode before cut-over.
- An advantage of this approach is that it's the same basic mechanism
  as you need to get a *hot-standby* working.
- Hence this allows you to test your disaster-recovery procedure on
  every release.
- Databases can often be a challenge with this technique
  - Particularly when you need to change the schema to support a new
    version of the software.
  - The trick is to *separate* the /deployment of schema changes/ from
    /application upgrades/.
  - First apply a database refactoring to change the schema to support
    both the new and old version of the application, deploy that,
    check everything is working fine so you have a rollback point,
  - Then deploy the new version of the application
