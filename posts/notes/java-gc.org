#+BEGIN_COMMENT
.. title: Java HotSpot VM GC Tunning Guide
.. slug: java-hotspot-gc
.. date: 2017-07-14
.. tags: java, gc
.. category: Notes
.. link:
.. description:
.. type: text
#+END_COMMENT



#+TITLE: Java HotSpot VM GC Tunning Guide

References
[[- https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html]]
- [[https://plumbr.eu/handbook/garbage-collection-in-java]]

A garbage collector (GC) is a memory management tool. It achieves
automatic memory management through the following operations:
- Allocating objects to a *young generation* and promoting aged objects
  into an *old generation*.
- Finding live objects in the old generation through a concurrent
  (parallel) *marking* phase. The Java HotSpot VM triggers the marking
  phase when the total Java heap occupancy exceeds the default
  threshold.
- Recovering free memory by compacting live objects through parallel
  copying.

* How GC Works
- In most configurations the operating system allocates the heap in
  advance to be managed by the JVM while the program is running. This
  has a couple of important ramifications
  - Object creation is faster because global synchronization with the
    OS is not needed for every single object.
  - When an object is no longer used, the GC reclaims the underlying
    memory and reuses it for future object allocation. This means
    there is no explicit deletion and no memory is given back to OS.
- GC Roots: The source of all object trees
  - Special objects called GC roots are always reachable and so is any
    object that has a GC root as its own root.
  - There are four kinds of GC root in JAVA:
    -Local variables in the stack of a thread.
    - Active Java threads and its thread local variable.
    -Static variables referenced by their classes. Classes themselves
    can be GCed, which would remove all referenced static variables.
  - JNI References, which are java objects that native code has
    created as part of a JNI call. Object thus created is theated
    specially because the JVM doesn't know if it is being referenced
    by the native code.
- Marking and Sweeping away garbage.
  - The algorithm traverses all object references, starting with the
    GC roots, and marks every object found as alive.
  - All that is not marked alive is reclaimed.


* GC in Young Generation
- Young generation is divided into 3 spaces:
  - One Eden space
  - Two survivor spaces.
- Allocating new objects using ~new~ operator (almost) always happens
  in Eden space. Eden space is behave like a *Stack* when allocating
  memory.
- Eden space full will trigger minor GC:
  1. Traverse graph of objects starting from GC roots
  2. Copy all objects reachable from GC roots to one of *survivor*
     spaces.
  3. *Wipe* out Eden space (basically just moving this stack pointer back to 0)
- Subsequent minor collections there are additional steps:
  - One of survivor spaces is examined as well.
  - Live objects from both Eden and one of Survivor spaces are copied
    to Second survivor space (which is empty). This means there is
    always exactly one free survivor space.
  - Clean both Eden and the Survivor space.
- Objects are copied between survivor spaces and Once given object
  jumps back and forth too many times (configurable, 8 by default), it
  is promoted to tenured space.
- Major GC runs when tenured space is full.
- Two techniques are used for faster memory allocations in HotSpot VM:
  - Bump-the-pointer :: tracks the last object allocated to the Eden
       space. That object will be located on *top* of the Eden
       space. If there is an object crated afterwords, the new object
       will be created on top of the last tracked object.
    - Lock is needed in multithread environment to track the last
      object location.
    - Performance drops due to lock contention.
  - Thread-Local Allocation Buffers :: is a region of Eden, allows
       each thread to have a small portion of the Eden space. Each
       thread can only access their own TLAB.
    - The normal way objects are allocated in HotSpot is within a
      TLAB. TLAB allocation can be done without synchronization with other
      threads. Synchronization is only needed when a new TLAB is fetched.
    - The TLABs are dynamically resized during the execution for each
      thread individually.
    - So if a thread allocates very much, the new TLABs that it gets
      from the heap will increase in size.
    - When allocation inside a TLAB is not possible (typically because
      there is not enough room there)
      - The allocation moves on to a shared Eden space.
      - If no enough space in there either, a GC in Young generation
        is triggered.
      - If the GC doesn't result in sufficient free memory inside
        Eden, the object is allocated in the Old Generation.
- *Card-marking* to handle *cross-generational* reference
  - When Eden space is being collected, the JVM use card-marking to
    marks the rough location of objects in Eden that may have links to
    them from the Old Generation.
  - They will essentially be root objects for the collection.
- Promotion
  - Objects that survivors the tenuring threshold are promoted to Old
    generation.
  - The threshold is dynamically adjusted but can set a upper limit,
    which is ~15~ by default on HotSopt, can be set by
    ~XX:+MaxTenuringThreshold~
  - Promotion may also happen *prematurely* if the size of the
    Survivor space is not enough to hold all of the live objects in
    the Young generation.

** Minor GC
- Collecting garbage from the Young space is called Minor GC.
- Minor GC is always triggered when the JVM is unable to allocate
  space for a new object.
- So the higher the allocation rate, the more frequently Minor GC
  occurs.
- During Minor GC, Tenured Generation is effectively ignored.
  - References from Tenured generation is considered to be GC roots.
  - References from Young generation to Tenured generation is ignored.
- Minor GC does trigger *stop-the-world* pause.
- However, for most applications, the length of the pause is
  *negligible* latency-wise if most of the objects in the Eden can be
  considered garbage and are never copied to Survivor/Old space.
- If the opposite is true, Minor GC pauses will take considerably more
  time.


* GC in old generation
- Since most objects are expected to be alive in the Old Generation,
  there is no *Mark and Copy* happening.
- Objects are moved around to minimize fragmentation.
- In principle the steps are:
  - Mark reachable objects by setting the marked bit next to all
    objects accessible through GC roots.
  - *Delete* all unreachable objects.
  - *Compact* the content of the old space by *copying* the live
    objects *contiguously* to the beginning of the old space.



* Behaviour Goals

There two primary measures of garbage collection performance:
*Throughput* and *Pause*

For parallel collector, Java SE provides two garbage collection
tunning parameters to achieve specific behavior gaols:
- *Maximum Pause Time*: \\
  To limit the longest of the GC pause. This is
  specified by command-line option ~-XX:MaxGCPauseMillis=<nnn>~, which
  is interpreted as a hint to the garbage collector that the pause
  time of ~<nnn>~ or less is desired. *By default*, there is no
  maximum pause time goal, and these adjustments may cause garbage
  collector to occur /more frequently/, reducing the overall
  *throughput* of the application.
- *Throughout*: \\
  The throughput goal is measured in terms of time in GC and in
  application respectively. With command-line option
  ~-XX:GCTimeRatio=<n>~, the ratio of gc time to application time is
  set to $1/(1+n)$. If the goal cannot be met, the size of the
  generations are increased in an effort to increase the application
  time in between collections.
- *Footprint*: \\
  If the two of the above goals are met, the GC reduces the size of
  the heap until one of the goals (invariably the throughput goal)
  cannot be met.

* Tunning Strategy

- Do not choose a maximum value for the heap unless you know you need
  a heap greater than the default maximum heap size. Choose a
  throughput goal that is sufficent for your application.
- If the application starts allocating at a higher rate, the heap will
  grow to maintain the same throughput.
- If the heap grows to its maximum size and the throughput goal is not
  being met, the maximum heap size is too small for the throughput
  goal. Set the maximum heap size to a value that is close to the
  total physical memory on the platform but which does not cause
  swapping of the application. If the throughput goal is still not
  met, then the goal for the application time is too high for the
  available memory on the platform.
- If the throughput goal can be met, but there are pauses that are too
  long, then select a maximum pause time goal. Choosing a maximum
  pause time goal may mean that your throughput goal will not be met,
  so choose values that are an acceptable compromise for the
  application.

* Arrangement of Generation

The default arrangement of generations, exception for parallel
collector and G1 looks like following:

[[https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/img/jsgct_dt_001_armgnt_gn.png]]

- At initialization, a maximum address space is virtually reserved but
  *not allocated to physical memory* unless it is needed. The complete
  address space reserved for object memory can be divided into the
  young and tenured generations.
- The young generation consists of *eden* and *two survivor spaces*.
- Most objects are initially allocated in *eden*. One survivor space is
  /empty at any time/, and serves as the destination of any live objects
  in eden; the other survivor space is the destination during the next
  *copying collection*.
- Objects are copied between survivor spaces in this way until they
  are old enough to be tenured, and copied to the *tenured generation*.

In general, choosing the size for a particular generation is a
trade-off between these /considerations of throughput, or puase time,
footprint, or promptness/:
- A very large young generation may maximize throughput, but does so
  at the expense of footprint, promptness, and pause times.
- Young generation pauses can be minimized by using a small young
  generation at the expense of throughput.
- The sizing of one generation does not affect the collection
  frequency and pause times for another generation.

* Measurement

The command-line option ~-verbose:gc~ causes information about the heap
and garbage collection to be printed at each collection. For example:
#+BEGIN_VERSE
[GC 325407K->83000K(776768K), 0.2300771 secs]
[GC 325816K->83372K(776768K), 0.2454258 secs]
[Full GC 267628K->83769K(776768K), 1.8479984 secs]
#+END_VERSE
- The numbers before and after the arrow (for example, 325407K->83000K
  from the first line) indicate the combined size of live objects
  before and after garbage collection, respectively.
- The next number in parentheses (for example, (776768K) again from
  the first line) is the *committed size of the heap*: the amount of
  space usable for Java objects *without* requesting more memory from
  the operating system.
- Note that this number only includes one of the survivor
  spaces. Except during a garbage collection, only one survivor space
  will be used at any given time to store objects.
- The last item on the line (for example, 0.2300771 secs) indicates
  the time taken to perform the collection.

The command-line option ~-XX:+PrintGCDetails~ causes additional
information about the collections to be printed:
#+BEGIN_VERSE
[GC [DefNew: 64575K->959K(64576K), 0.0457646 secs] 196016K->133633K(261184K), 0.0459067 secs]
#+END_VERSE
This indicates that the minor collection recovered about 98% of the
young generation, DefNew: 64575K->959K(64576K) and took 0.0457646 secs
(about 45 milliseconds).

The option ~-XX:+PrintGCTimeStamps~ adds a time stamp at the start of
each collection. This is useful to see /how frequently/ garbage
collections occur.

* Sizing the Generations

The different size parameters as illustrated in the following picture:\\
[[https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/img/jsgct_dt_006_prm_gn_sz.png]]

- At initialisation of vm, the *entire space* for the heap is
  *reserved*. The size of the space reserved can be specified with ~-Xmx~
  option.
- If the value of ~-Xms~ is smaller than the value of ~-Xmx~, not all
  the space that is reserved is immediately committed to the virtual
  machine. The uncommitted space is labelled as *virtual* space.
- Maximum heap size should always be smaller than the amount of memory
  installed on the machine to avoid excessive page faults and
  thrashing.
- The different parts of the heap (tenured generation and young
  generation) can grow to the limit of the virtual space as needed.
- It can be seen from the picture that the *committed space* is the memory
  already acquired by Java, for the different generation.
- After total available memory, the proportion of *young generation*
  is the second most influential factor of GC. /The bigger the young
  generation, the less often minor collections occur/.
- However, for a bounded heap size, a /larger young generation implies
  a *smaller* tenured generation/, which will *increase* the frequency
  of major collections.
- Parameter ~NewRatio~ controls the young generation size. ~-XX:NewRatio=3~
  means the ratio between the young and the tenured generation is
  1:3. In other words, the combined size of the eden and the survivor
  space will be one-forth of the total heap size.
- Parameter ~NewSize~ and ~MaxNewSize~ bound the young generation.
- Parameter ~SurvivorRatio~ controls the survivor spaces, but it is
  often not important for performance.
- Increase the young generation size as you increase the number of
  *processors*, because allocation can be paralleled.


* GC Algorithms
** Marking reachable objects
- First, GC defines some specific objects as GC Roots.
- Next, GC traverses the whole object graph in your memory, starting
  from GC Roots and following references from the roots to other
  objects.
- The application threads need to be stopped for the marking to happen
  as you cannot really traverse the graph if it keeps changing.
- Such a situation when the application threads are temporarily
  stopped so that JVM can indulge in housekeeping activities is called
  a *safe point* resulting in a *stop-the-world* pause.
  - Safe points can be triggered for different reasons but GC is by
    far the most common reason.
- The duration of this pause depends either on total number of objects
  in heap, nor on the size of the heap.
  - But on *the number of alive objects*.
** Removing unused objects
- Mark and *Sweep*
  [[https://plumbr.eu/wp-content/uploads/2015/06/GC-sweep.png]]
  - After marking phase, all space occupied by unvisited objects
    is considered free and thus be reused.
  - Requires using the so called *free-list* recording of every free
    region and its size.
  - Increase memory fragmentation.
- Mark-Sweep-Compact
  [[https://plumbr.eu/wp-content/uploads/2015/06/GC-mark-sweep-compact.png]]
  - Solve the shortcomings of Mark and Sweep by moving all marked, and
    thus alive, objects to the beginning of the memory region.
  - Increase pause time, but no fragmentation issues.
- Mark and Copy
  [[https://plumbr.eu/wp-content/uploads/2015/06/GC-mark-and-copy-in-Java.png]]
  - Same as Mark and compact as it also relocate live objects.
  - The important difference is that the target of relocation.

* Available Collectors
- Serial Collector (~-XX:+UseSerialGC~) :: /no communication overhead
     between threads/, can be useful on multiprocessors for
     applications with small data sets up to 100MB.
  - Using an algorithm called *mark-sweep-compact*:
    - Mark :: Marking the surviving objects
    - Sweep :: Check the heap from the front and leaves only the
               surviving ones.
    - Compact :: Fills up the heap from the front with the objects so
                 that the objects are piled up consecutively, and
                 divides the heap into two parts: one with objects and
                 one without object.
- Parallel Collector (~-XX:+UseParallelGC~) :: also known as
     /throughput collector/. It performs *minor collections* in
     parallel, can significantly reduce the garbage collection
     overhead.
  - While serial GC uses only one thread to process a GC, Parallel GC
    uses several threads to process a GC.
  - Its biggest advantage is that is uses multiple threads to scan
    through and compact the heap.
  - The downside to the parallel collector is that it will stop
    application threads when performing *either a minor or full* GC
    collection.
  - Intended for *medium-sized* to *large-sized* data sets that are
    run on multiprocessor or multithreaded hardware.
  - *Parallel compaction* is a feature that enables parallel collector
    to perform *major collections* in parallel. Without it major
    collections are performed using a /single thread/. It is enabled by
    default but can be turn off with ~-XX:UseParallelOldGC~
  - See the difference between serial and parallel collector:
    [[http://www.cubrid.org/files/attach/images/220547/284/313/difference-between-the-serial-gc-and-parallel-gc.png]]
- *Concurrent Collector* :: performs most of its work concurrently,
     while application is still running to keep GC pause short.
  - Designed for application with media to large sized data set in
    which response time is more important than overall throughput.
  - *CMS Collector* (-XX:+UseConcMarkSweepGC)
    - See the difference between Serial Mark-Sweep-Compact and
      Concurrent Mark-Sweep
    [[http://www.cubrid.org/files/attach/images/220547/284/313/serial-gc-and-cms-gc.png]]
  - *G1 Collector* (-XX:+UseG1GC)

** Selecting a Collector:
   - Unless your application has strict pause time requirement, you
     can always allow the VM to select a collector, and adjust heap
     size to improve performance if necessary. Otherwise:
   - Use Serial Collector
     - if the application has a small data set;
     - or if the application will be run on a single processor and no
       pause time requirement;
   - Use Parallel Collector if:
     - a peak application performance is the first priority
     - no pause time requirement
     - or pause of 1 second or longer are acceptable.
   - Use Concurrent GC if:
     - Response time is more important than overall throughput
     - and GC pause must be ketp shorter than 1 second


* Concurrent GC
** CMS
- Assuming that your heap is less than 4Gb in size.
- CMS is only used in the Old generation, Yong generation still uses
  Parallel GC.
- The collector is designed to avoid long pauses while collecting in
  the Old Generation. This is achieved by:
  - Does not compact the old generation but use *free-lists* to manage
    reclaimed space.
  - Does most of the job in the mark-and-sweep concurrently with the
    application.
- This algorithm uses multiple threads (“concurrent”) to scan through
  the heap (“mark”) for unused objects that can be recycled
  (“sweep”).
- This algorithm will enter “stop the world” (STW) mode in two
  cases. The steps are:
  1. Phase 1: Initial Mark(STW) :: when initialising the initial
       marking of roots (objects in the old generation that are
       reachable from thread entry points or static variables)
     - References from GC roots.
     - References from Young generation.
  2. Phase 2: Concurrent Mark :: traverses the Old Generation and
       marks all live objects, starting from the roots found in the
       previous phase of "Initial Mark".
     - Concurrently running with the application threads.
     - Not all live objects *may* be marked, since the application is
       mutating reference during the marking.
  3. Phase 3: Concurrent Preclean
     - While the previous phase was running, some references can be
       changed. Whenever that happens, the JVM marks the area of the
       heap (called *Card*) that contains the mutated objects as
       "/dirty/" (this is known as *Card Marking*)
     - In the preclean phase, these dirty objects are accounted for,
       and the objects reachable from them are also marked.
  4. Phase 4: Concurrent Abortable Preclean :: attempts to takes as
       much work off the stop-the-world Final Remark as possible.
  5. Phase 5: Final Remark(STW) :: finalise the marking of objects in
       the Old generation, since the previous steps are all running
       concurrently, this is required to make the marking final.
  6. Phase 6: Concurrent Sweep :: remove unused the objects and
       reclaim the space occupied by them.
  7. Phase 7: Concurrent Reset :: resetting inner data structure of
       the CMS, and preparing them for the next cycle.
- Major drawbacks
  - Old generation fragmentation
  - Lack of predictability in pause duration, especially on large
    heaps.

** G1
- Was designed to better support heaps *larger than 4GB*.
- A /soft real-time/ garbage collector, meaning that you can set
  specific performance goals to it.
  - Request the stop-the-world pause to be no longer than ~x~
    milliseconds within any given ~y~-millisecond long time range.
  - Meet this goal with high probability (but not with certainty, that
    would be /hard real-time/.
- To achieve this, G1 build upon a number of insights:
  - Heap doesn't have to be split into contiguous Young and Old generation.
    - Instead, the heap is split into a member (typically about 2048)
      smaller heap regions.
    - Each region may be an Eden region, a Survivor region, or an Old
      region.
    - The logical union of all Eden and Survivor regions is the Young
      generation, and all the Old regions is the Old generation.
    - This allow the GC to avoid collecting the entire heap at once,
      and instead approach the problem /incrementally/.
      - Only a subset of the regions, called *collection set* will be
        considered at a time.
      - *All the Young regions* are collected during each pause, but
        *some Old regions* may be included.
  - G1 will estimate the amount of *live* data in each region.
    - This is used in building the collection set.
    - The regions that contains the most marbage are collected first.
    - Hence the name: *Garbage First*.
- Steps:
  - Evaluation Pauses: fully Young.
  - Concurrent Marking
  - Evacuation Pause: Mixed
- it compacts the heap on-the-go, something the CMS collector only
  does during full STW collections.
