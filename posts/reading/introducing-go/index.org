#+BEGIN_COMMENT
.. title: Introducing Go
.. slug: introducing-go
.. date: 2017-07-15
.. tags: go
.. category: Books
.. link:
.. description:
.. type: text
#+END_COMMENT

* Chapter 1. Getting started
- The Go toolset uses an environment variable called ~GOPATH~ to find
  Go source code.
- Find document for certain function using ~godoc~:
     #+BEGIN_SRC sh
       godoc fmt Println
     #+END_SRC
w  will get document for function ~Println~ in package ~fmt~.

* Chapter 2. Types
- Go is a statically typed language. Variables have specific types and
  type cannot change.
- Number Types
  - Go’s integer types are ~uint8~, ~uint16~, ~uint32~, ~uint64~,
    ~int8~, ~int16~, ~int32~, and ~int64~.
  - There are also three machine dependent integer types: ~uint~, ~int~,
    and ~uintptr~. They are machine dependent because their size depends
    on the type of architecture you are using.
  - Go has two floating-point types: ~float32~ and ~float64~ (also often
    referred to as single precision and double precision,
    respectively).
  - For complex numbers, it has: ~complex64~ and ~complex128~.
- String
  - String literals can double quotes "Hello, World" or backticks
    `Hello, World`. Double-quoted strings *cannot* contain newlines and
    they allow special escape sequences.
  - Common String operations:
    * Length: ~len("Hello World")~
    * Index: ~"Hello World"[​1]~
    * Concat: ~"Hello " + "World"~
- Boolean type

* Chapter 3. Variables
- constant: ~const x string = "Hello, World"~
- Define multiple variables:
  #+BEGIN_SRC go
    var (
      a = 5
      b = 10
      c = 11
    )
  #+END_SRC

* Chapter 4. Control Structures
- for loop:
  #+BEGIN_SRC go
     i = 0
     for i<=10 {}
  #+END_SRC

  #+BEGIN_SRC go
     for i=0;i<=10;i++ {}
  #+END_SRC
- switch:
  #+BEGIN_SRC go
     switch i {
         case 0: ...
         case 1: ...
         default: ...
     }
  #+END_SRC

* Chapter 5. Arrays, Slices, and Maps
- Define and using array:
  #+BEGIN_SRC go
    func main() {
            var x [5]int
            x[40]=10
            var total int = 0;
            for i=0; i<5; i++{
                    total+=x[i]
            }
            fmt.Println(total / len(x))
    }
  #+END_SRC
- A special form of for loop allow:
  #+BEGIN_SRC go
    for _, value:=range x {
            total +=value
    }
  #+END_SRC
  A single underscore (_) is used to tell the compiler it(the iterator variable)
  is not needed in the loop
- Shortcut to define array:
  #+BEGIN_SRC go
    x:=[3]float64{98, 99, 199}
  #+END_SRC
  or in multiple lines:
  #+BEGIN_SRC go
    x := [4]float64 {
            98,
            99,
            100,
            102,
    }
  #+END_SRC
  Note that the extra trailing ',' in the last line is required by Go.
- Array in Go is fix length, and is actually in the type declaration. Usually
  slice is used, which is a type built on top of an array.
- A slice is a segment of an array. Its length is allowed to change.
  #+BEGIN_SRC go
    var x []float64
  #+END_SRC
- To create a slice, using the ~make~ function:
  #+BEGIN_SRC go
      x := make([]float64, 5)
  #+END_SRC
  This creates a slice that is associated with an underlying float64 array of
  length 5. Slices are always associated with some array, they can be smaller
  but not longer than the associated array.
- Slice can also be created using ~[low : high]~ expression:
  #+BEGIN_SRC go
    arr := [5]float64 {1,2,3,4,5}
    x := arr[0:5]
  #+END_SRC
  In this expression, both 'low' and 'high' can be omitted.
- Map
  #+BEGIN_SRC go
    var x map[string]int
    x := make(map[string]int)

    x["key"] = 10
    fmt.Println(x)
  #+END_SRC
  + length of map can change as adding new item to it.
  + maps are not sequential.
  + can be deleted with ~delete~ function: ~delete(x,1)~
  + a map returns the zero value for the value type when the key doesn't exist.
  + It can also return two values like:
    #+BEGIN_SRC go
      name, ok := elements["Un"]
    #+END_SRC
    in which, the ~name~ is the value returned, and ~ok~ tells whether the
    lookup is successful.
  + A common pattern in go looks like:
    #+BEGIN_SRC go
      if name, ok := elements["Un"]; ok{
              fmt.Println(name, ok)
      }
    #+END_SRC


* Chapter 6: Functions
- Function's return type can be named:
  #+BEGIN_SRC go
    func f2() (r int){
            r=1
            return
    }
  #+END_SRC
- Function can return multiple value:
  #+BEGIN_SRC go
    func f() (int, int) {
            return 5, 6
    }
    func main() {
            x,y:=f()
    }
  #+END_SRC
  Multiple values are often used to return an error value along with the
  result ~(x, err := f())~, or a boolean to indicate success ~(x, ok := f())~.
- Variadic Functions:
  #+BEGIN_SRC go
    func add(args ...int) int {
            total := 0
            for _, v := range args {
                    total += v
            }
            return total
    }
  #+END_SRC
  in this example ~add~ is allowed to be called with multiple
  integers, this parameter is known as a *variadic* parameter.
- It is possible to create functions inside function, which creates
  *Closure*:
  #+BEGIN_SRC go
    func main() {
            add := func(x, y int) int {
                      return x+y
                    }
            fmt.Println(add(1,1))
    }
  #+END_SRC
  When you create a local function like this, it also has access to
  other local variables.
- ~defer~: a special statement that schedules a function call to be run
  after the function completes. It basically moves the call to the end
  of the function. It is often used when some resource need to be
  cleaned in some way:
  #+BEGIN_SRC go
    f, _ := os.Open(filename)
    defer f.Close()
  #+END_SRC
  + It keeps the Close() call to Open() so it is easier to understand.
  + If there are multiple return statement, the Close() will happen
    before both of them.
  + Deferred function will run even if a run-time panic occurs.
- ~panic~ function is used to create a run-time error; we can handle a
  run-time panic with the build-in ~recover~ function.
- recover stops the panic and returns the value that was passed to the
  call to panic.
- Here is the example to use ~recover~ when having ~panic~:
  #+BEGIN_SRC go
    func main() {
            defer func() {
                    str := recover()
                    fmt.Println(str)
            }()
            panic("PANIC")
    }
  #+END_SRC
- ~new~ takes a type as an argument, allocates enough memory to fit a
  value of that type, and returns a pointer to it. Go is
  garbage-collected so no need to ~free~ explicitly.

* Chapter 7: Structs and Interfaces
